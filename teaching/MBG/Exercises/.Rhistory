plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Variogram γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Add vertical line for practical range
abline(v = practical_range, col = "red", lty = 2)
# Add legend
legend("topleft", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
# Plot the variogram
plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Variogram γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Add vertical line for practical range
abline(v = practical_range, col = "red", lty = 2)
# Add legend
legend("topleft", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("liberia")
# Convert to an sf object
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
crs_lb <- propose_utm(liberia_sf)
liberia_sf <- st_transform(liberia_sf, crs = crs_lb)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
family = "binomial",
data = liberia_sf)
check_mcmc(lb_fit)
# Updating the MCMCL
theta0 <- coef(lb_fit)
# Updating the MCMCL
theta0 <- coef(lb_fit)
theta0
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
par0 = theta0,
family = "binomial",
data = liberia_sf)
summary(lb_fit)
summary(lb_fit)
rm(list = ls())
library(RiskMap)
library(lme4)
data("tz_malaria")
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
glmer_fit_null <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat_null <- ranef(glmer_fit_null)$cluster.number[,1]
tz_vari_null <-
s_variogram(data = tz_malaria, variable = "Z_hat_null",
bins = seq(1,500, length = 15),
scale_to_km = TRUE,
n_permutation = 1000)
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
glmer_fit_null <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat_null <- ranef(glmer_fit_null)$cluster.number[,1]
tz_vari_null <-
s_variogram(data = tz_malaria, variable = "Z_hat_null",
bins = seq(1,500, length = 15),
scale_to_km = TRUE,
n_permutation = 1000)
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
rm(list = ls())
library(RiskMap)
library(lme4)
library(sf)
data("tz_malaria")
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
glmer_fit_null <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat_null <- ranef(glmer_fit_null)$cluster.number[,1]
tz_vari_null <-
s_variogram(data = tz_malaria, variable = "Z_hat_null",
bins = seq(1,500, length = 15),
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
glmer_fit_null <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
summary(glmer_fit_null)
tz_malaria$Z_hat_null <- ranef(glmer_fit_null)$cluster.number[,1]
tz_malaria$Z_hat_null
seq(1,500, length = 15)
dist_summaries(tz_malaria)
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
glmer_fit <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - 33, 0) +
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat <- ranef(glmer_fit)$cluster.number[,1]
tz_vari <-
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,500, length = 15),
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari, plot_envelope = TRUE)
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
par(mfrow = c(1,2))
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
plot_s_variogram(tz_vari, plot_envelope = TRUE)
summary(glmer_fit_null)
summary(glmer_fit)
# Fitting an intercept only model
glgm_fit_null <- glgpm(Pf ~ gp(nugget = NULL),
den = Ex,
data = tz_malaria,
family = "binomial")
summary(glgm_fit_null)
413.75501*3
glgm_fit_null <- glgpm(Pf ~ gp(nugget = NULL),
den = Ex,
par0 = coef(glmer_fit_null),
data = tz_malaria,
family = "binomial")
glgm_fit_null <- glgpm(Pf ~ gp(nugget = NULL),
den = Ex,
par0 = coef(glgm_fit_null),
data = tz_malaria,
family = "binomial")
summary(glgm_fit_null)
# Fitting a model with covariates
glgm_fit <- glgpm(Pf ~ Temperature + pmax(Temperature - 33, 0) +
EVI + gp(nugget = NULL),
den = Ex,
data = tz_malaria,
family = "binomial")
summary(glgm_fit)
# Fitting a model with covariates
glgm_fit <- glgpm(Pf ~ Temperature + pmax(Temperature - 33, 0) +
EVI + gp(nugget = NULL),
par0 = coef(glgm_fit),
den = Ex,
data = tz_malaria,
family = "binomial")
coef(glgm_fit_null)
coef(glgm_fit)
library(ggplot2)
library(dplyr)
# Extract parameters
theta_hat_null <- coef(glgm_fit_null)
theta_hat <- coef(glgm_fit)
theta_hat_null
# Extract parameters
theta_hat_null <- coef(glgm_fit_null)
theta_hat <- coef(glgm_fit)
# Define a sequence of distances
distances <- seq(0, 1000, length.out = 200)
# Compute variogram values for both models
variogram_df <- data.frame(
Distance = rep(distances, 2),
Variogram = c(
theta_hat_null$tau2 + theta_hat_null$sigma2 * (1 - exp(-distances / theta_hat_null$phi)),
theta_hat$tau2 + theta_hat$sigma2 * (1 - exp(-distances / theta_hat$phi))
),
Model = factor(rep(c("No covariates", "With covariates"), each = length(distances)))
)
# Compute variogram values for both models
variogram_df <- data.frame(
Distance = rep(distances, 2),
Variogram = c(
theta_hat_null$tau2 + theta_hat_null$sigma2 * (1 - exp(-distances / theta_hat_null$phi)),
theta_hat$tau2 + theta_hat$sigma2 * (1 - exp(-distances / theta_hat$phi))
),
Model = factor(rep(c("No covariates", "With covariates"), each = length(distances)))
)
# Plot using ggplot2
ggplot(variogram_df, aes(x = Distance, y = Variogram, color = Model)) +
geom_line(size = 1.2) +
labs(
title = "Theoretical Variogram Comparison",
x = "Distance",
y = "Variogram"
) +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(
legend.title = element_blank(), # Removes legend title
legend.position = "bottom" # Places legend at the bottom for clarity
)
rm(list = ls())
library(RiskMap)
library(lme4)
library(sf)
data("tz_malaria")
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
# Fitting a model with covariates
glgm_fit <- glgpm(Pf ~ EVI + Temperature + pmax(Temperature - 33, 0) +
gp(nugget = NULL),
den = Ex,
data = tz_malaria,
family = "binomial")
# Shapefile of Tanzania
library(rgeoboundaries)
shp_tz_0 <- geoboundaries(country = "tanzania", adm_lvl = "adm0")
shp_tz_0 <- st_transform(shp_tz_0, crs = 32736)
# Create the grid
grid_tza <- create_grid(shp_tz_0, spat_res = 10)
# EVI for Tanzania
library(terra)
tza_evi <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
tza_evi <- rast("../Data/Tanzania_Annual_EVI_2015.tif")
library(terra)
tza_evi <- rast("../Data/Tanzania_Annual_EVI_2015.tif")
tza_evi <- project(tza_evi, "EPSG:32736")
# Temperature for Tanzania
tza_temp <- rast("../Data/Tanzania_Annual_LST_2015.tif")
tza_temp <- project(tza_temp, "EPSG:32736")
# Population density for Tanzania
library(terra)
tza_pop <- rast("../Data/Tanzania_population_density_2015.tif")
tza_pop <- project(tza_pop, "EPSG:32736")
# Extract covariates over the grid
pred_tza <- data.frame(EVI = extract(tza_evi, st_as_sf(grid_tza))[,2],
Temperature = extract(tza_temp, st_as_sf(grid_tza))[,2])
pred_S_tza_cov <-
pred_over_grid(glgm_fit, predictors = pred_tza,
grid_pred = grid_tza, type="joint")
pred_S_tza_cov <-
pred_over_grid(glgm_fit, predictors = pred_tza,
grid_pred = grid_tza)
pred_T_grid <-
pred_target_grid(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
pd_summary = list(mean = mean,
below10 = function(x) mean(x < 0.1),
btw10_30 = function(x) mean(x > 0.1 &
x < 0.2),
class = function(x) {
v1 <- mean(x < 0.1)
v2 <- mean(x > 0.1 &
x < 0.2)
v3 <- mean(x > 0.2)
(1:3)[which.max(c(v1,v2,v3))]
}))
plot(pred_T_grid, which_target = "prev", which_summary = "mean",
main = "Predictive mean")
par(mfrow=c(1,1))
plot(pred_T_grid, which_target = "prev", which_summary = "mean",
main = "Predictive mean")
plot(pred_T_grid, which_target = "prev", which_summary = "below10")
plot(pred_T_grid, which_target = "prev", which_summary = "btw10_20")
pred_T_grid <-
pred_target_grid(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
pd_summary = list(mean = mean,
below10 = function(x) mean(x < 0.1),
btw10_20 = function(x) mean(x > 0.1 &
x < 0.2),
class = function(x) {
v1 <- mean(x < 0.1)
v2 <- mean(x > 0.1 &
x < 0.2)
v3 <- mean(x > 0.2)
(1:3)[which.max(c(v1,v2,v3))]
}))
plot(pred_T_grid, which_target = "prev", which_summary = "below10")
plot(pred_T_grid, which_target = "prev", which_summary = "btw10_20")
plot(pred_T_grid, which_target = "prev", which_summary = "class")
plot(pred_T_grid, which_target = "prev", which_summary = "mean",
main = "Predictive mean")
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("liberia")
# Convert to an sf object
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
crs_lb <- propose_utm(liberia_sf)
liberia_sf <- st_transform(liberia_sf, crs = crs_lb)
# Fitting a Binomial geostatistical model
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
family = "binomial",
data = liberia_sf)
# Obtaining the grid
library(rgeoboundaries)
shp_lb_0 <- geoboundaries(country = "liberia", adm_lvl = "adm0")
shp_lb_0 <- st_transform(shp_lb_0, crs=crs_lb)
shp_lb_1 <- geoboundaries(country = "liberia", adm_lvl = "adm1")
shp_lb_1 <- st_transform(shp_lb_1, crs=crs_lb)
grid_lb <- create_grid(shp_lb_0, spat_res = 5)
library(elevatr)
elevation <- get_elev_point(st_as_sf(grid_lb), prj = crs_lb, src = "aws")$elevation
pred_lb <- data.frame(elvation=elevation)
pred_S_lb <-
pred_over_grid(lb_fit, grid_pred = grid_lb,
predictors = pred_lb, type="joint")
pred_area <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) mean(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
col_names = "shapeName")
# Plot point predictions of average prevalence
plot(pred_area, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0.1, 0.30),
breaks =  seq(0.1, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence \n (no weights)") +
theme(plot.title = element_text(size = 15))
pred_area$target$Bomi$prev$mean
# Plot point predictions of average prevalence
plot(pred_area, which_target = "prev", which_summary = "mean")
# Plot of the exceedance probabilities
plot(pred_area, which_target = "prev", which_summary = "exceed20",
palette = "RdYlGn",
limits = c(0, 1),
breaks = seq(0,1, by = 0.1)) +
guides(fill=guide_legend(title="Probability")) +
ggtitle("Exceedance probability (L = 0.2) \n (no weights)") +
theme(plot.title = element_text(size = 15))
library(wpgpDownloadR)
install.packages("wpgpDownloadR")
pred_area_w <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) sum(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
weights = weights_pred,
standardize_weights = TRUE,
return_shp = TRUE,
col_names = "shapeName")
# Plot point predictions of average prevalence (weighted)
plot(pred_area_w, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0.1, 0.30),
breaks =  seq(0.1, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence \n (population weighted)") +
theme(plot.title = element_text(size = 15))
# Extra pop density weights at the prediction grid
weights_pred <- extract(lbr_pop, st_as_sf(grid_lb))$lbr_ppp_2014
pred_area_w <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) sum(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
weights = weights_pred,
standardize_weights = TRUE,
return_shp = TRUE,
col_names = "shapeName")
# Obtaining population density
library(wpgpDownloadR)
lbr_url <- wpgpGetCountryDataset(ISO3 = "LBR", covariate = "ppp_2014")
library(terra)
lbr_pop <- rast(lbr_url)
pred_area <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) mean(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
col_names = "shapeName",
return_shp = TRUE)
# Plot point predictions of average prevalence
plot(pred_area, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0.1, 0.30),
breaks =  seq(0.1, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence \n (no weights)") +
theme(plot.title = element_text(size = 15))
rm(list = ls())
library(RiskMap)
library(lme4)
library(sf)
data("tz_malaria")
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
# Fitting a model with covariates
glgm_fit <- glgpm(Pf ~ EVI + Temperature + pmax(Temperature - 33, 0) +
gp(nugget = NULL),
den = Ex,
data = tz_malaria,
family = "binomial")
# Shapefile of Tanzania
library(rgeoboundaries)
shp_tz_0 <- geoboundaries(country = "tanzania", adm_lvl = "adm0")
shp_tz_0 <- st_transform(shp_tz_0, crs = 32736)
shp_tz_1 <- geoboundaries(country = "tanzania", adm_lvl = "adm1")
shp_tz_1 <- st_transform(shp_tz_1, crs = 32736)
# Create the grid
grid_tza <- create_grid(shp_tz_0, spat_res = 10)
# EVI for Tanzania
library(terra)
tza_evi <- rast("../Data/Tanzania_Annual_EVI_2015.tif")
tza_evi <- project(tza_evi, "EPSG:32736")
# Temperature for Tanzania
tza_temp <- rast("../Data/Tanzania_Annual_LST_2015.tif")
tza_temp <- project(tza_temp, "EPSG:32736")
# Population density for Tanzania
library(terra)
tza_pop <- rast("../Data/Tanzania_population_density_2015.tif")
tza_pop <- project(tza_pop, "EPSG:32736")
# Extract covariates over the grid
pred_tza <- data.frame(EVI = extract(tza_evi, st_as_sf(grid_tza))[,2],
Temperature = extract(tza_temp, st_as_sf(grid_tza))[,2])
# Prediction of S(x)
pred_S_tza_cov <-
pred_over_grid(glgm_fit, predictors = pred_tza,
grid_pred = grid_tza, type="joint")
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_1,
shp_target = mean,
pd_summary = list(mean = mean,
below10 = function(x) mean(x < 0.1),
btw10_30 = function(x) mean(x > 0.1 &
x < 0.2),
class = function(x) {
v1 <- mean(x < 0.1)
v2 <- mean(x > 0.1 &
x < 0.2)
v3 <- mean(x > 0.2)
(1:3)[which.max(c(v1,v2,v3))]
}),
col_names = "shapeName", return_shp = TRUE)
plot(pred_T_adm1, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0, 0.30),
breaks =  seq(0, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence") +
theme(plot.title = element_text(size = 15))
library(ggplot2)
plot(pred_T_adm1, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0, 0.30),
breaks =  seq(0, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence") +
theme(plot.title = element_text(size = 15))
plot(pred_T_adm1, which_target = "prev", which_summary = "class",
palette = "RdYlGn",
breaks = 1:3) +
guides(fill=guide_legend(title="Class")) +
ggtitle("Predicted district class") +
theme(plot.title = element_text(size = 15))
tza_weights <- 10*extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
tza_weights
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_0,
weights = tza_weights,
standardize_weights = FALSE,
shp_target = sum,
pd_summary = list(mean = mean,
lower = function(x) quantile(x, 0.025),
upper = function(x) quantile(x, 0.975)),
col_names = "shapeName")
pred_T_adm1$target$Tanzania$prev
################
################
data("anopheles")
anopheles_sf <- st_as_sf(anopheles, coords = c("web_x", "web_y"), crs = 3857)
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
family = "poisson",
data = anopheles_sf)
# Create grid from convex hull
shp_ch <- convex_hull_sf(an_fit$data_sf)
an_grid <- create_grid(shp_ch, spat_res = 2)
library(elevatr)
an_elev <- get_elev_point(st_as_sf(an_grid), prj = 3857, src = "aws")$elevation
predictors <- data.frame(elevation= an_elev)
# Create grid from convex hull
shp_ch <- convex_hull_sf(an_fit$data_sf)
an_grid <- create_grid(shp_ch, spat_res = 2)
an_grid <- create_grid(shp_ch, spat_res = 2)
an_elev <- get_elev_point(st_as_sf(an_grid), prj = 3857, src = "aws")$elevation
predictors <- data.frame(elevation= an_elev)
pred_an_S <- pred_over_grid(an_fit, grid = an_grid,
predictors = predictors,
type = "joint")
pred_n_mosq_grid <-
pred_target_grid(pred_an_S,
f_target = list(n_mosq = function(lp) exp(lp)),
pd_summary = list(mean = function(Tx) mean(Tx)))
plot(pred_n_mosq_grid, which_target = "n_mosq", which_summary = "mean")
an_weights <- 1*(predictors$elevation > 400 & predictors$elevation < 830)
an_weights
pred_n_mosq_shp <-
pred_target_shp(pred_an_S, shp = shp_ch,
weights = an_weights,
shp_target = sum,
f_target = list(n_mosq = function(lp) exp(lp)),
pd_summary = list(mean = function(Tx) mean(Tx),
q025 = function(Tx) quantile(Tx, 0.025),
q075 = function(Tx) quantile(Tx, 0.975)))
pred_n_mosq_shp$target$reg1$n_mosq
install.packages("dirichletprocess")
library(dirichletprocess)
data <- MASS::mvrnorm(100, mu = c(0, 0), Sigma = diag(2))
dp <- DirichletProcessMvnormal(data)
dp <- Fit(dp, 1000)
dp
plot(dp)
install.packages("PReMium")
install.packages("PReMiuM")
install.packages("nimble")
