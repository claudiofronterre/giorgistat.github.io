main = "Quantile 0.025")
plot(pred_T_lb, which_target = "prev", which_summary = "upper_lim",
main = "Quantile 0.975")
plot(pred_T_lb, which_target = "prev", which_summary = "exceed20",
main = "Exceedance probability (L = 0.2)")
plot(pred_T_lb, which_target = "prev", which_summary = "exceed30",
main = "Exceedance probability (L = 0.3)")
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("liberia")
# Convert to an sf object
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
crs_lb <- propose_utm(liberia_sf)
liberia_sf <- st_transform(liberia_sf, crs = crs_lb)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
family = "binomial",
data = liberia_sf)
library(rgeoboundaries)
shp_lb_0 <- geoboundaries(country = "liberia", adm_lvl = "adm0")
shp_lb_0 <- st_transform(shp_lb_0, crs=crs_lb)
shp_lb_1 <- geoboundaries(country = "liberia", adm_lvl = "adm1")
shp_lb_1 <- st_transform(shp_lb_1, crs=crs_lb)
grid_lb <- create_grid(shp_lb_0, spat_res = 5)
library(elevatr)
elevation <- get_elev_point(st_as_sf(grid_lb), prj = crs_lb, src = "aws")$elevation
pred_lb <- data.frame(elvation=elevation)
pred_S_lb <-
pred_over_grid(lb_fit, grid_pred = grid_lb,
predictors = pred_lb, type="joint")
pred_area <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) mean(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
col_names = "shapeName")
# Plot point predictions of average prevalence
plot(pred_area, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0.1, 0.30),
breaks =  seq(0.1, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence \n (no weights)") +
theme(plot.title = element_text(size = 15))
# Plot of the exceedance probabilities
plot(pred_area, which_target = "prev", which_summary = "exceed20",
palette = "RdYlGn",
limits = c(0, 1),
breaks = seq(0,1, by = 0.1)) +
guides(fill=guide_legend(title="Probability")) +
ggtitle("Exceedance probability (L = 0.2) \n (no weights)") +
theme(plot.title = element_text(size = 15))
# Obtaining population density
library(wpgpDownloadR)
lbr_url <- wpgpGetCountryDataset(ISO3 = "LBR", covariate = "ppp_2014")
library(terra)
lbr_pop <- rast(lbr_url)
lbr_pop <- project(lbr_pop, "EPSG:32629")
# Extra pop density weights at the prediction grid
weights_pred <- extract(lbr_pop, st_as_sf(grid_lb))$lbr_ppp_2014
pred_area_w <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) sum(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
weights = weights_pred,
standardize_weights = TRUE,
col_names = "shapeName")
# Plot point predictions of average prevalence (weighted)
plot(pred_area_w, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0.1, 0.30),
breaks =  seq(0.1, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence \n (population weighted)") +
theme(plot.title = element_text(size = 15))
pred_area <- pred_target_shp(pred_S_lb, shp = shp_lb_1,
shp_target = function(Tx) mean(Tx),
f_target = list(prev =
function(lp) exp(lp)/(1+exp(lp))),
pd_summary = list(mean = mean,
exceed20 = function(x) mean(x > 0.2)),
col_names = "shapeName")
# Plot point predictions of average prevalence
plot(pred_area, which_target = "prev", which_summary = "mean",
palette = "RdYlGn",
limits = c(0.1, 0.30),
breaks =  seq(0.1, 0.30, by = 0.05)) +
guides(fill=guide_legend(title="Prevalence")) +
ggtitle("Average prevalence \n (no weights)") +
theme(plot.title = element_text(size = 15))
# Plot of the exceedance probabilities (weighted)
plot(pred_area_w, which_target = "prev", which_summary = "exceed20",
palette = "RdYlGn",
limits = c(0, 1),
breaks = seq(0,1, by = 0.1)) +
guides(fill=guide_legend(title="Probability")) +
ggtitle("Exceedance probability (L = 0.2) \n (population weighted)") +
theme(plot.title = element_text(size = 15))
library(RiskMap)
data("tz_malaria")
library(ggplot2)
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "Empirical logit vs Temperature",
x = "Temperature (°C)",
y = "Empirical logit") +
theme_minimal()
p1
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "Empirical logit vs Precipitation",
x = "Precipitation (mm)",
y = "Empirical logit") +
theme_minimal()
p2
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "Empirical logit vs EVI",
x = "EVI",
y = "Empirical logit") +
theme_minimal()
p3
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "Empirical logit vs NTL",
x = "log-NTL",
y = "Empirical logit") +
theme_minimal()
p4
# Function to calculate peak temperature
peak_temp <- function(data) {
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = data,
family = binomial)
coef_fit <- coef(fit)
a <- coef_fit["I(Temperature^2)"]
b <- coef_fit["Temperature"]
peak_temp <- -b / (2 * a)
return(peak_temp)
}
# Parametric bootstrapping
parametric_bootstrap <- function(fit, estimator, nsim = 1000) {
original_data <- fit$data
out <- numeric(nsim)
for (i in 1:nsim) {
simulated_response <- simulate(fit)$sim_1
new_data <- original_data
new_data$Pf <- simulated_response[,1]
out[i] <- estimator(new_data)
}
return(out)
}
# Parametric bootstrapping
parametric_bootstrap <- function(fit, estimator, nsim = 1000) {
original_data <- fit$data
out <- numeric(nsim)
for (i in 1:nsim) {
simulated_response <- simulate(fit)$sim_1
new_data <- original_data
new_data$Pf <- simulated_response[,1]
out[i] <- estimator(new_data)
}
return(out)
}
# Function to calculate peak temperature
peak_temp <- function(data) {
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = data,
family = binomial)
coef_fit <- coef(fit)
a <- coef_fit["I(Temperature^2)"]
b <- coef_fit["Temperature"]
peak_temp <- -b / (2 * a)
return(peak_temp)
}
# Parametric bootstrapping
parametric_bootstrap <- function(fit, estimator, nsim = 1000) {
original_data <- fit$data
out <- numeric(nsim)
for (i in 1:nsim) {
simulated_response <- simulate(fit)$sim_1
new_data <- original_data
new_data$Pf <- simulated_response[,1]
out[i] <- estimator(new_data)
}
return(out)
}
# Run bootstrapping
set.seed(123)
peak_temps <- parametric_bootstrap(fit_bin, estimator = peak_temp, nsim = 1000)
# Point 1
library(ggplot2)
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "Empirical logit vs Temperature",
x = "Temperature (°C)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "Empirical logit vs Precipitation",
x = "Precipitation (mm)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "Empirical logit vs EVI",
x = "EVI",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "Empirical logit vs NTL",
x = "log-NTL",
y = "Empirical logit") +
theme_minimal()
# Point 2
library(boot)
# Fit the binomial GLM
fit_bin <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = tz_malaria,
family = binomial)
# Function to calculate peak temperature
peak_temp <- function(data) {
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = data,
family = binomial)
coef_fit <- coef(fit)
a <- coef_fit["I(Temperature^2)"]
b <- coef_fit["Temperature"]
peak_temp <- -b / (2 * a)
return(peak_temp)
}
# Parametric bootstrapping
parametric_bootstrap <- function(fit, estimator, nsim = 1000) {
original_data <- fit$data
out <- numeric(nsim)
for (i in 1:nsim) {
simulated_response <- simulate(fit)$sim_1
new_data <- original_data
new_data$Pf <- simulated_response[,1]
out[i] <- estimator(new_data)
}
return(out)
}
# Run bootstrapping
set.seed(123)
peak_temps <- parametric_bootstrap(fit_bin, estimator = peak_temp, nsim = 1000)
# Calculate peak temperature and CI
peak_temp_estimate <- peak_temp(tz_malaria)
ci_lower <- quantile(peak_temps, 0.025)
ci_upper <- quantile(peak_temps, 0.975)
cat("Temperature at which prevalence is highest:", peak_temp_estimate, "\n")
cat("95% Confidence Interval: [", ci_lower, ",", ci_upper, "]\n")
p1
# Fit linear spline model
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - opt_cp, 0),
data = tz_malaria,
family = binomial)
opt_cp <- estimate_change_point(tz_malaria)
# Estimate change point
estimate_change_point <- function(data, change_points = seq(25, 35, by = 0.1)) {
log_likelihoods <- numeric(length(change_points))
for (i in seq_along(change_points)) {
change_point <- change_points[i]
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - change_point, 0),
data = data,
family = binomial)
log_likelihoods[i] <- logLik(fit)
}
optimal_change_point <- change_points[which.max(log_likelihoods)]
return(optimal_change_point)
}
# Estimate change point
estimate_change_point <- function(data, change_points = seq(25, 35, by = 0.1)) {
log_likelihoods <- numeric(length(change_points))
for (i in seq_along(change_points)) {
change_point <- change_points[i]
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - change_point, 0),
data = data,
family = binomial)
log_likelihoods[i] <- logLik(fit)
}
optimal_change_point <- change_points[which.max(log_likelihoods)]
return(optimal_change_point)
}
opt_cp <- estimate_change_point(tz_malaria)
opt_cp
opt_cp <- estimate_change_point(tz_malaria)
# Fit linear spline model
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - opt_cp, 0),
data = tz_malaria,
family = binomial)
summary(fit_bin)
summary(fit_bin_sp)
peak_temps <- parametric_bootstrap(fit_bin, estimator = peak_temp, nsim = 1000)
# Calculate peak temperature and CI
peak_temp_estimate <- peak_temp(tz_malaria)
ci_lower <- quantile(peak_temps, 0.025)
ci_upper <- quantile(peak_temps, 0.975)
cat("Temperature at which prevalence is highest:", peak_temp_estimate, "\n")
cat("95% Confidence Interval: [", ci_lower, ",", ci_upper, "]\n")
# Estimate change point
estimate_change_point <- function(data, change_points = seq(25, 35, by = 0.1)) {
log_likelihoods <- numeric(length(change_points))
for (i in seq_along(change_points)) {
change_point <- change_points[i]
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - change_point, 0),
data = data,
family = binomial)
log_likelihoods[i] <- logLik(fit)
}
optimal_change_point <- change_points[which.max(log_likelihoods)]
return(optimal_change_point)
}
opt_cp <- estimate_change_point(tz_malaria)
# Fit linear spline model
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - opt_cp, 0),
data = tz_malaria,
family = binomial)
# Bootstrapping for change point
cp_boot <- parametric_bootstrap(fit = fit_bin_sp,
estimator = estimate_change_point,
nsim = 100)
ci_lower_cp <- quantile(cp_boot, 0.025)
ci_upper_cp <- quantile(cp_boot, 0.975)
cat("Estimate of the change point in temperature:", opt_cp, "\n")
cat("95% Confidence Interval: [", ci_lower_cp, ",", ci_upper_cp, "]\n")
library(lme4)
# Fit GLMM
fit2_glmer <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - opt_cp, 0) +
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
opt_cp
summary(fit2_glmer)
exp(0.1*14.26623)
0.32842-0.85623
library(rgeoboundaries)
library(terra)
library(sf)
library(rgeoboundaries)
library(terra)
# Convert to sf object
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
# Download Tanzania boundary
shp_tz <- geoboundaries(country = "tanzania", adm_lvl = "adm0")
shp_tz <- st_transform(shp_tz, crs = 32736)
tz_malaria
tz_sf
?tz_malaria
str(tz_malaria)
tz_sf <- st_as_sf(tz_malaria, coords = c("Long", "Lat"), crs = 4326)
propose_utm(tz_sf)
tz_sf <- st_transform(tz_sf, crs = propose_utm(tz_sf))
# Download Tanzania boundary
shp_tz <- geoboundaries(country = "tanzania", adm_lvl = "adm0")
shp_tz <- st_transform(shp_tz, crs = 32736)
# Create a 5 km grid
grid_utm <- create_grid(shp_tz, spat_res = 5)
# Read and project raster files
r_temp <- rast("../Data/Tanzania_Annual_LST_2015.tif")
r_temp <- terra::project(r_temp, "EPSG:32736")
r_evi <- rast("../Data//Tanzania_Annual_EVI_2015.tif")
r_evi <- terra::project(r_evi, "EPSG:32736")
# Extract values and predict prevalence
pred_data_frame <- data.frame(
Temperature = extract(r_temp, st_coordinates(grid_utm))[,1],
EVI = extract(r_evi, st_coordinates(grid_utm))[,1]
)
# Extract values and predict prevalence
pred_data_frame <- data.frame(
Temperature = extract(r_temp, st_coordinates(grid_utm))[,1],
EVI = extract(r_evi, st_coordinates(grid_utm))[,1]
)
pred_glmer <- predict(fit2_glmer, newdata = pred_data_frame, type = "response", re.form = NA)
pred_glmer <- predict(fit2_glmer, newdata = pred_data_frame, type = "response",
re.form = NA)
# Create raster plot
raster_pred <- data.frame(
x = st_coordinates(grid_utm)[, 1],
y = st_coordinates(grid_utm)[, 2],
prev = pred_glmer
)
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +
scale_fill_viridis_c() +
coord_cartesian() +
theme_minimal() +
labs(title = "Predictions", fill = "Prevalence")
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +
scale_fill_viridis_c() +
coord_cartesian() +
theme_minimal() +
labs(title = "Predictions", fill = "Prevalence")
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia_sf <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia_sf) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
lm_fit <- lm(log(lead) ~ 1, data = galicia_sf)
galicia_sf$residuals <- lm_fit$residuals
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
# Plotting the results
plot_s_variogram(galicia_variog, plot_envelope = TRUE)
# Fit a linear geostatistical model
fit_galicia <-
glgpm(log(lead) ~ gp(x, y, kappa = 1.5), data=galicia, family = "gaussian",
crs = 32629, scale_to_km = TRUE)
summary(fit_galicia)
# Fit a linear geostatistical model
fit_galicia <-
glgpm(log(lead) ~ gp(x, y, kappa = 1.5), data=galicia, family = "gaussian",
crs = 32629, scale_to_km = TRUE)
summary(fit_galicia)
summary(fit_galicia)
# Fit a linear geostatistical model
fit_galicia <-
glgpm(log(lead) ~ gp(x, y, kappa = 1.5), data=galicia, family = "gaussian",
crs = 32629, scale_to_km = TRUE)
summary(fit_galicia)
# Maximum likelihood estimates
par_hat <- coef(fit_galicia)
par_hat
# Given parameters
sigma2 <- par_hat$sigma2
phi <- par_hat$phi
# Compute the practical range where correlation = 0.05
practical_range <- -phi * log(0.05)
practical_range
# Define distance values for plotting
h <- seq(0, practical_range * 1.2, length.out = 100)
variogram <- sigma2 * (1 - exp(-h / phi))
# Plot the variogram
plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Variogram γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Add vertical line for practical range
abline(v = practical_range, col = "red", lty = 2)
# Add legend
legend("topleft", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
# Plot the variogram
plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Variogram γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Add vertical line for practical range
abline(v = practical_range, col = "red", lty = 2)
# Add legend
legend("topleft", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("liberia")
# Convert to an sf object
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
crs_lb <- propose_utm(liberia_sf)
liberia_sf <- st_transform(liberia_sf, crs = crs_lb)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
family = "binomial",
data = liberia_sf)
check_mcmc(lb_fit)
# Updating the MCMCL
theta0 <- coef(lb_fit)
# Updating the MCMCL
theta0 <- coef(lb_fit)
theta0
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
par0 = theta0,
family = "binomial",
data = liberia_sf)
summary(lb_fit)
summary(lb_fit)
