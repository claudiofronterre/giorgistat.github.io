peak_temps <- parametric_bootstrap(fit_bin,
estimator = peak_temp,
nsim = 1000)
# Calculate the peak temperature and its 95% confidence interval
peak_temp_estimate <- peak_temp(tz_malaria)
ci_lower <- quantile(peak_temps, 0.025)
ci_upper <- quantile(peak_temps, 0.975)
# Print the results
cat("Temperature at which prevalence is highest:", peak_temp_estimate, "\n")
cat("95% Confidence Interval: [", ci_lower, ",", ci_upper, "]\n")
parametric_bootstrap(fit = fit_bin_sp, estimator = estimate_change_point)
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
# Point 1
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "Empirical logit vs Temperature",
x = "Temperature (Â°C)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "Empirical logit vs Precipitation",
x = "Precipitation (mm)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "Empirical logit vs EVI",
x = "EVI",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "Empirical logit vs NTL",
x = "log-NTL",
y = "Empirical logit") +
theme_minimal()
# Point 2
# Load necessary libraries
library(boot)
# Fit the original model
fit_bin <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = tz_malaria,
family = binomial)
# Define the function to calculate the peak temperature
peak_temp <- function(data) {
# Fit the binomial GLM with quadratic temperature term
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = data,
family = binomial)
# Extract coefficients
coef_fit <- coef(fit)
a <- coef_fit["I(Temperature^2)"]
b <- coef_fit["Temperature"]
# Calculate the peak temperature (vertex of the quadratic curve)
peak_temp <- -b / (2 * a)
return(peak_temp)
}
# Parametric bootstrap function
parametric_bootstrap <- function(fit, estimator, nsim = 1000) {
# Extract the original data
original_data <- fit$data
# Initialize a vector to store peak temperatures
out <- numeric(nsim)
# Perform parametric bootstrapping
for (i in 1:nsim) {
# Simulate new response data using the fitted model
simulated_response <- simulate(fit)$sim_1
# Create a new dataset with the simulated response
new_data <- original_data
new_data$Pf <- simulated_response[,1]
# Calculate the peak temperature for the new dataset
out[i] <- estimator(new_data)
}
return(out)
}
# Run parametric bootstrapping
set.seed(123)  # For reproducibility
peak_temps <- parametric_bootstrap(fit_bin,
estimator = peak_temp,
nsim = 1000)
# Calculate the peak temperature and its 95% confidence interval
peak_temp_estimate <- peak_temp(tz_malaria)
ci_lower <- quantile(peak_temps, 0.025)
ci_upper <- quantile(peak_temps, 0.975)
# Print the results
cat("Temperature at which prevalence is highest:", peak_temp_estimate, "\n")
cat("95% Confidence Interval: [", ci_lower, ",", ci_upper, "]\n")
## Linear spline model
estimate_change_point <- function(data, change_points = seq(25, 35, by = 0.1)) {
log_likelihoods <- numeric(length(change_points))
for (i in seq_along(change_points)) {
change_point <- change_points[i]
# Fit the binomial GLM with the current change point
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - change_point, 0),
data = data,
family = binomial)
# Store the log-likelihood
log_likelihoods[i] <- logLik(fit)
}
# Find the optimal change point (max log-likelihood)
optimal_change_point <- change_points[which.max(log_likelihoods)]
return(optimal_change_point)
}
estimate_change_point(tz_malaria)
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-change_point,0),
data = tz_malaria,
family = binomial)
estimate_change_point <- function(data, change_points = seq(25, 35, by = 0.1)) {
log_likelihoods <- numeric(length(change_points))
for (i in seq_along(change_points)) {
change_point <- change_points[i]
# Fit the binomial GLM with the current change point
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - change_point, 0),
data = data,
family = binomial)
# Store the log-likelihood
log_likelihoods[i] <- logLik(fit)
}
# Find the optimal change point (max log-likelihood)
optimal_change_point <- change_points[which.max(log_likelihoods)]
return(optimal_change_point)
}
estimate_change_point(tz_malaria)
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-change_point,0),
data = tz_malaria,
family = binomial)
parametric_bootstrap(fit = fit_bin_sp, estimator = estimate_change_point)
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-change_point,0),
data = tz_malaria,
family = binomial)
opt_cp <- estimate_change_point(tz_malaria)
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0),
data = tz_malaria,
family = binomial)
parametric_bootstrap(fit = fit_bin_sp, estimator = estimate_change_point)
cp_boot <- parametric_bootstrap(fit = fit_bin_sp, estimator = estimate_change_point)
cat("95% Confidence Interval: [", ci_lower, ",", ci_upper, "]\n")
p1
p2
p3
p4
fit_all <-  glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
Precipitation + pmax(Precipitaiton-80,0)+
EVI+
NTL + pmax(NTL,0),
data = tz_malaria,
family = binomial)
fit_all <-  glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
Precipitation + pmax(Precipitation-80,0)+
EVI+
NTL + pmax(NTL,0),
data = tz_malaria,
family = binomial)
fit_all <-  glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI,
data = tz_malaria,
family = binomial)
summary(fit_all)
fit_all <-  glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI,
data = tz_malaria,
family = quasibinomial)
summary(fit_all)
fit_all <-  glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI,
data = tz_malaria,
family = binomial)
fit2_glmer <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI + (1 | cluster.number),
data = tz_malaria,
family = binomial)
library(lme4)
fit2_glmer <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI + (1 | cluster.number),
data = tz_malaria,
family = binomial)
fit2_glmer <- glmer(cbind(Pf, Ex - Pf) ~ scale(Temperature) +
pmax(scale(Temperature)-opt_cp,0)+
scale(EVI) + (1 | cluster.number),
data = tz_malaria,
family = binomial)
fit2_glmer <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
summary(fit2_glmer)
str(tz_malaria)
?tz_malaria
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
library(sf)
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
### Get the shapefile for Tanzania
library(rgeoboundaries)
### Get the shapefile for Tanzania
library(rgeoboundaries)
# Download Liberia's administrative boundary (ADM0 level)
shp_tz <- geoboundaries(country = "tanzania", adm_lvl = "adm0")
# Transform the shapefile to the proposed UTM CRS
shp_tz <- st_transform(shp_tz, crs = crs_tz)
# Transform the shapefile to the proposed UTM CRS
shp_tz <- st_transform(shp_tz, crs = 32736)
# Create a grid over Liberia with a spatial resolution of 5 km
grid_utm <- create_grid(shp_tz, spat_res = 5)
# Transform the grid back to WGS84 (EPSG:4326) for compatibility with other data
grid_ll <- st_transform(grid_utm, crs = 4326)
# Clear the workspace
rm(list = ls())
# Load necessary libraries
library(RiskMap)  # For RiskMap functionality
library(lme4)    # For mixed-effects models
data("liberia")   # Load the Liberia dataset
# Create a unique ID for each location in the Liberia dataset
liberia$ID_loc <- 1:nrow(liberia)
# Fit a binomial mixed-effects model with log-elevation as a fixed effect and location as a random effect
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc),
family = binomial, data = liberia, nAGQ = 25)
# Summarize the model results
summary(fit_glmer_lib)
### Propose UTM projection for Liberia
library(sf)
# Convert Liberia data to an sf object with WGS84 (EPSG:4326) CRS
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
# Propose a UTM CRS for Liberia
crs_lb <- propose_utm(liberia_sf)
### Get the shapefile for Liberia
library(rgeoboundaries)
# Download Liberia's administrative boundary (ADM0 level)
shp_lb <- geoboundaries(country = "liberia", adm_lvl = "adm0")
# Transform the shapefile to the proposed UTM CRS
shp_lb <- st_transform(shp_lb, crs = crs_lb)
# Create a grid over Liberia with a spatial resolution of 5 km
grid_utm <- create_grid(shp_lb, spat_res = 5)
# Transform the grid back to WGS84 (EPSG:4326) for compatibility with other data
grid_ll <- st_transform(grid_utm, crs = 4326)
### Get elevation raster for Liberia
library(elevatr)
# Download elevation data for Liberia at zoom level 5 and clip it to the country boundary
elev_lb <- get_elev_raster(locations = shp_lb, z = 5, clip = "locations")
# Convert the elevation raster to a data frame for use with ggplot2
library(terra)
raster_df <- as.data.frame(elev_lb, xy = TRUE)
colnames(raster_df)[3] <- "elev"  # Rename the elevation column
# Plot the elevation raster using ggplot2
library(ggplot2)
ggplot(data = raster_df) +
geom_raster(aes(x = x, y = y, fill = elev)) +  # Plot elevation as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Elevation", fill = "Density") +  # Add title and legend label
geom_sf(data = shp_lb, col = 2, lwd = 2, fill = NA)  # Overlay Liberia boundary
### Download and process temperature data
library(geodata)
# Download monthly minimum temperature data for Liberia from WorldClim
clim_lb <- worldclim_country(country = "Liberia", var = "tmin", path = tempdir())
# Mask the temperature data to Liberia's boundary
a <- mask(clim_lb, st_transform(shp_lb, crs = 4326))
# Plot the mean minimum temperature
terra::plot(mean(a), plg = list(title = "Min. temperature (C)"))
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm)))
# Predict prevalence using the fitted model
pred_glm <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response")
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm),
ID_loc=1))
# Predict prevalence using the fitted model
pred_glm <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response")
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm)),
ID_loc=10e7)
# Predict prevalence using the fitted model
pred_glm <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response")
# Predict prevalence using the fitted model
pred_glmer <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response", re.form = NA)
# Create a data frame with predicted prevalence and grid coordinates
raster_pred <- data.frame(x = st_coordinates(grid_utm)[, 1],
y = st_coordinates(grid_utm)[, 2],
prev = pred_glmer)
# Plot the predicted prevalence using ggplot2
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +  # Plot prevalence as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Predictions", fill = "Prevalence")  # Add title and legend label
library(terra)
r_temp <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
r_evi <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif)
r_temp <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
r_evi <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
pred_data_frame <- data.frame(Temperature =
extract(r_temp, grid_utm))
plot(grid_utm)
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
# Point 1
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "Empirical logit vs Temperature",
x = "Temperature (Â°C)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "Empirical logit vs Precipitation",
x = "Precipitation (mm)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "Empirical logit vs EVI",
x = "EVI",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "Empirical logit vs NTL",
x = "log-NTL",
y = "Empirical logit") +
theme_minimal()
# Point 2
# Load necessary libraries
library(boot)
# Fit the original model
fit_bin <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = tz_malaria,
family = binomial)
# Define the function to calculate the peak temperature
peak_temp <- function(data) {
# Fit the binomial GLM with quadratic temperature term
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + I(Temperature^2),
data = data,
family = binomial)
# Extract coefficients
coef_fit <- coef(fit)
a <- coef_fit["I(Temperature^2)"]
b <- coef_fit["Temperature"]
# Calculate the peak temperature (vertex of the quadratic curve)
peak_temp <- -b / (2 * a)
return(peak_temp)
}
# Parametric bootstrap function
parametric_bootstrap <- function(fit, estimator, nsim = 1000) {
# Extract the original data
original_data <- fit$data
# Initialize a vector to store peak temperatures
out <- numeric(nsim)
# Perform parametric bootstrapping
for (i in 1:nsim) {
# Simulate new response data using the fitted model
simulated_response <- simulate(fit)$sim_1
# Create a new dataset with the simulated response
new_data <- original_data
new_data$Pf <- simulated_response[,1]
# Calculate the peak temperature for the new dataset
out[i] <- estimator(new_data)
}
return(out)
}
# Run parametric bootstrapping
set.seed(123)  # For reproducibility
peak_temps <- parametric_bootstrap(fit_bin,
estimator = peak_temp,
nsim = 1000)
# Calculate the peak temperature and its 95% confidence interval
peak_temp_estimate <- peak_temp(tz_malaria)
ci_lower <- quantile(peak_temps, 0.025)
ci_upper <- quantile(peak_temps, 0.975)
# Print the results
cat("Temperature at which prevalence is highest:", peak_temp_estimate, "\n")
cat("95% Confidence Interval: [", ci_lower, ",", ci_upper, "]\n")
## Linear spline model
estimate_change_point <- function(data, change_points = seq(25, 35, by = 0.1)) {
log_likelihoods <- numeric(length(change_points))
for (i in seq_along(change_points)) {
change_point <- change_points[i]
# Fit the binomial GLM with the current change point
fit <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - change_point, 0),
data = data,
family = binomial)
# Store the log-likelihood
log_likelihoods[i] <- logLik(fit)
}
# Find the optimal change point (max log-likelihood)
optimal_change_point <- change_points[which.max(log_likelihoods)]
return(optimal_change_point)
}
opt_cp <- estimate_change_point(tz_malaria)
fit_bin_sp <- glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0),
data = tz_malaria,
family = binomial)
cp_boot <- parametric_bootstrap(fit = fit_bin_sp, estimator = estimate_change_point)
cp_boot <- parametric_bootstrap(fit = fit_bin_sp,
estimator = estimate_change_point,
nsim = 100)
# Print the results
ci_lower_cp <- quantile(cp_boot, 0.025)
ci_upper_cp <- quantile(cp_boot, 0.975)
cat("Estimate of the change point in temperature:", opt_cp, "\n")
cat("95% Confidence Interval: [", ci_lower_cp, ",", ci_upper_cp, "]\n")
# Generate predicted values from the linear spline model
tz_malaria$predicted_sp <- predict(fit_bin_sp)
# Plot empirical logit with the GAM smooth and the linear spline prediction
p_spl <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
geom_line(aes(y = predicted_sp), color = "red") +
labs(title = "Empirical logit vs Temperature",
x = "Temperature (Â°C)",
y = "Empirical logit") +
theme_minimal()
fit2 <-  glm(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI,
data = tz_malaria,
family = binomial)
library(lme4)
fit2_glmer <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature-opt_cp,0)+
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
library(sf)
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
### Get the shapefile for Tanzania
library(rgeoboundaries)
# Download Liberia's administrative boundary (ADM0 level)
shp_tz <- geoboundaries(country = "tanzania", adm_lvl = "adm0")
# Transform the shapefile to the proposed UTM CRS
shp_tz <- st_transform(shp_tz, crs = 32736)
# Create a grid over Liberia with a spatial resolution of 5 km
grid_utm <- create_grid(shp_tz, spat_res = 5)
library(terra)
r_temp <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
r_evi <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
pred_data_frame <- data.frame(Temperature =
extract(r_temp, st_coordinates(grid_utm)),
EVI =
extract(r_evi, st_coordinates(grid_utm)))
pred_data_frame
r_temp <- project(r_temp, crs = 32736)
r_temp <- terra::project(r_temp, crs = 32736)
? terra::project
r_temp <- terra::project(r_temp, to = 32736)
r_temp <- terra::project(r_temp, to = "+proj=epsg:32736")
r_temp <- terra::project(r_temp, "EPSG:32736")
r_evi <- terra::project(r_evi, "ESPG:32736")
r_evi <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
r_evi <- terra::project(r_evi, "ESPG:32736")
r_evi <- terra::project(r_evi, "EPSG:32736")
pred_data_frame <- data.frame(Temperature =
extract(r_temp, st_coordinates(grid_utm)),
EVI =
extract(r_evi, st_coordinates(grid_utm)))
pred_data_frame
pred_glmer <- predict(fit2_glmer,
newdata = pred_data_frame, type = "response", re.form = NA)
pred_data_frame <- data.frame(Temperature =
extract(r_temp, st_coordinates(grid_utm)),
EVI =
extract(r_evi, st_coordinates(grid_utm)))
extract(r_temp, st_coordinates(grid_utm))
pred_data_frame <- data.frame(Temperature =
extract(r_temp, st_coordinates(grid_utm))[,1],
EVI =
extract(r_evi, st_coordinates(grid_utm))[,1])
pred_glmer <- predict(fit2_glmer,
newdata = pred_data_frame, type = "response", re.form = NA)
# Create a data frame with predicted prevalence and grid coordinates
raster_pred <- data.frame(x = st_coordinates(grid_utm)[, 1],
y = st_coordinates(grid_utm)[, 2],
prev = pred_glmer)
# Plot the predicted prevalence using ggplot2
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +  # Plot prevalence as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Predictions", fill = "Prevalence")  # Add title and legend label
summary(fit2_glmer)
