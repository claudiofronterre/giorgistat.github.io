library(elevatr)
# Download elevation data for Liberia at zoom level 5 and clip it to the country boundary
elev_lb <- get_elev_raster(locations = shp_lb, z = 5, clip = "locations")
# Convert the elevation raster to a data frame for use with ggplot2
library(terra)
raster_df <- as.data.frame(elev_lb, xy = TRUE)
colnames(raster_df)[3] <- "elev"  # Rename the elevation column
# Plot the elevation raster using ggplot2
library(ggplot2)
ggplot(data = raster_df) +
geom_raster(aes(x = x, y = y, fill = elev)) +  # Plot elevation as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Elevation", fill = "Density") +  # Add title and legend label
geom_sf(data = shp_lb, col = 2, lwd = 2, fill = NA)  # Overlay Liberia boundary
### Download and process temperature data
library(geodata)
# Download monthly minimum temperature data for Liberia from WorldClim
clim_lb <- worldclim_country(country = "Liberia", var = "tmin", path = tempdir())
# Mask the temperature data to Liberia's boundary
a <- mask(clim_lb, st_transform(shp_lb, crs = 4326))
# Plot the mean minimum temperature
terra::plot(mean(a), plg = list(title = "Min. temperature (C)"))
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm)))
# Fit a binomial GLM model with log-elevation as a predictor
glm_fit <- glm(cbind(npos, ntest - npos) ~ log(elevation),
data = liberia, family = "binomial")
# Predict prevalence using the fitted model
pred_glm <- predict(glm_fit, newdata = elev_data_frame, type = "response")
# Create a data frame with predicted prevalence and grid coordinates
raster_pred <- data.frame(x = st_coordinates(grid_utm)[, 1],
y = st_coordinates(grid_utm)[, 2],
prev = pred_glm)
# Plot the predicted prevalence using ggplot2
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +  # Plot prevalence as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Predictions", fill = "Prevalence")  # Add title and legend label
rm(list = ls())
library(RiskMap)
library(hellp = RiskMap)
library(help = RiskMap)
data("tz_malaria")
tz_malaria
str(tz_malaria)
?tz_malaria
library(terra)
r <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
range(r)
plot(r)
rang(tz_malaria$EVI)
range(tz_malaria$EVI)
# Load the EVI raster
evi_raster <- raster("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")  # Replace with the path to your downloaded GeoTIFF
# Load the EVI raster
evi_raster <- r("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")  # Replace with the path to your downloaded GeoTIFF
# Load the EVI raster
evi_raster <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")  # Replace with the path to your downloaded GeoTIFF
# Divide by 10000 to normalize the EVI values
evi_normalized <- evi_raster / 10000
# Plot the normalized EVI
plot(evi_normalized, main = "Normalized EVI (Range: -1 to 1)")
# Save the normalized EVI raster as a new GeoTIFF
writeRaster(evi_normalized,"teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif", format="GTiff")
# Save the normalized EVI raster as a new GeoTIFF
writeRaster(evi_normalized,"teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
# Save the normalized EVI raster as a new GeoTIFF
writeRaster(evi_normalized,"teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif", overwrite = TRUE)
r <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
plot(r)
range(tz_malaria$EVI)
range(R)
range(r)
range(tz_malaria$EVI)
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif.tif")
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif.tif")
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
plot(r)
range(r)
range(tz_malaria$Temperature)
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
plot(r)
# Scale the values by dividing by 50 (since the MODIS LST is scaled by 50)
lst_scaled <- r / 50
# Convert from Kelvin to Celsius by subtracting 273.15
lst_celsius <- lst_scaled - 273.15
plot(lst_celsius)
writeRaster(lst_celsius, "lst_celsius_2015.tif", overwrite = TRUE)
writeRaster(lst_celsius, "teaching/MBG/Data/Tanzania_Annual_LST_2015.tif", overwrite = TRUE)
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
plot(r)
range(tz_malaria$Temperature)
range(r)
r <- rast("teaching/MBG/Data/Tanzania_Annual_NightLights_2015.tif")
plot(r)
plot(log(r))
range(r)
range(tz_malaria$NTL)
?st_as_sf
?tz_malaria
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
extract(r, tz_sf)
extract(r, tz_sf)[,1]
extract(r, tz_sf)[,2]
plot(tz_malaria$NTL,extract(r, tz_sf)[,2])
abline(0,1,col=2)
plot(tz_malaria$NTL,extract(r, tz_sf)[,2])
tz_malaria$NTL <- tz_malaria$NTL,extract(r, tz_sf)[,2]
tz_malaria$NTL
tz_malaria$NTL,extract(r, tz_sf)[,2]
extract(r, tz_sf)[,2]
which(is.na(extract(r, tz_sf)[,2]))
tz_malaria$NTL <- extract(r, tz_sf)[,2]
tz_malaria$NTL
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
extract(r, tz_sf)[,2]
plot(tz_malaria$Temperature,  extract(r, tz_sf)[,2])
abline(0,1,col = 2)
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
plot(r)
range(tz_malaria$Temperature)
range(r)
tz_malaria$Temperature <- extract(r, tz_sf)[,2]
r <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
plot(r)
tz_malaria$EVI
r <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
plot(r)
range(tz_malaria$EVI)
# Load required packages
library(raster)
extract(r, tz_sf)[,2]
tz_malaria$EVI
plot(tz_malaria$EVI, extract(r, tz_sf)[,2])
abline(0,1,col=2)
rm(list = ls())
library(RiskMap)
data("tz_malaria")
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
library(terra)
r <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
plot(r)
range(tz_malaria$EVI)
# Load required packages
library(raster)
tz_malaria$EVI<- extract(r, tz_sf)[,2]
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
plot(r)
range(tz_malaria$Temperature)
range(r)
tz_malaria$Temperature <- extract(r, tz_sf)[,2]
r <- rast("teaching/MBG/Data/Tanzania_Annual_NightLights_2015.tif")
range(r)
range(tz_malaria$NTL)
tz_malaria$NTL <- extract(r, tz_sf)[,2]
plot(r)
tz_malaria$Precipitation
r <- rast("teaching/MBG/Data/Tanzania_Total_Annual_Precipitation_2015.tif")
plot(r)
plot(tz_malaria$Precipitation,  extract(r, tz_sf)[,2])
abline(0,1,col=2)
tz_malaria$Precipitation <- extract(r, tz_sf)[,2]
extract(r, tz_sf)[,2]
plot(tz_malaria$Precipitation,  extract(r, tz_sf)[,2])
abline(0,1,col=2)
str(tz_malaria)
save(tz_malaria, file="/home/giorgi/Desktop/Research/RiskMap/data/tz_malaria.rdata")
rm(list = ls())
library(RiskMap)
data("tz_malaria")
tz_malaria$PfPR2.10
tz_malaria$PfPR2
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
str(tz_malaria)
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
library(ggplot2)
library(dplyr)
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(df, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "elogit vs Temperature",
x = "Temperature (°C)",
y = "elogit") +
theme_minimal()
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "elogit vs Temperature",
x = "Temperature (°C)",
y = "elogit") +
theme_minimal()
p1
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "elogit vs Precipitation",
x = "Precipitation (mm)",
y = "elogit") +
theme_minimal()
p2
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "elogit vs EVI",
x = "EVI",
y = "elogit") +
theme_minimal()
p3
# Scatter plot for elogit vs NTL
p4 <- ggplot(df, aes(x = NTL, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "NTL",
y = "elogit") +
theme_minimal()
p4
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "log-NTL",
y = "elogit") +
theme_minimal()
p4
tz_malaria$NTL
rm(list = ls())
rm(list = ls())
library(RiskMap)
data("tz_malaria")
tz_sf <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
library(terra)
r <- rast("teaching/MBG/Data/Tanzania_Annual_EVI_2015.tif")
plot(r)
range(tz_malaria$EVI)
# Load required packages
library(raster)
tz_malaria$EVI<- extract(r, tz_sf)[,2]
r <- rast("teaching/MBG/Data/Tanzania_Annual_LST_2015.tif")
plot(r)
range(tz_malaria$Temperature)
range(r)
tz_malaria$Temperature <- extract(r, tz_sf)[,2]
r <- rast("teaching/MBG/Data/Tanzania_Annual_NightLights_2015.tif")
range(r)
range(tz_malaria$NTL)
tz_malaria$NTL <- extract(r, tz_sf)[,2]
r <- rast("teaching/MBG/Data/Tanzania_Total_Annual_Precipitation_2015.tif")
plot(r)
plot(tz_malaria$Precipitation,  extract(r, tz_sf)[,2])
abline(0,1,col=2)
tz_malaria$Precipitation <- extract(r, tz_sf)[,2]
save(tz_malaria, file="/home/giorgi/Desktop/Research/RiskMap/data/tz_malaria.rdata")
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "log-NTL",
y = "elogit") +
theme_minimal()
p4
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
p4
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "log-NTL",
y = "elogit") +
theme_minimal()
p4
save(tz_malaria, file="/home/giorgi/Desktop/Research/RiskMap/data/tz_malaria.rdata")
devtools::install_github("giorgilancs/RiskMap")
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "elogit vs Temperature",
x = "Temperature (°C)",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "elogit vs Precipitation",
x = "Precipitation (mm)",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "elogit vs EVI",
x = "EVI",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "log-NTL",
y = "elogit") +
theme_minimal()
# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
detach("package:RiskMap")
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "elogit vs Temperature",
x = "Temperature (°C)",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "elogit vs Precipitation",
x = "Precipitation (mm)",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "elogit vs EVI",
x = "EVI",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "log-NTL",
y = "elogit") +
theme_minimal()
# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "elogit vs Temperature",
x = "Temperature (°C)",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "elogit vs Precipitation",
x = "Precipitation (mm)",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "elogit vs EVI",
x = "EVI",
y = "elogit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "elogit vs NTL",
x = "log-NTL",
y = "elogit") +
theme_minimal()
# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
print(p2)
tz_malaria$Precipitation
range(tz_malaria$Precipitation)
# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
rm(list = ls())
library(RiskMap)
library(ggplot2)
library(dplyr)
data("tz_malaria")
tz_malaria$elogit <- log((tz_malaria$Pf+0.5)/(tz_malaria$Ex-tz_malaria$Pf+0.5))
# Load necessary libraries
# Assuming your data frame is named 'df'
# Scatter plot for elogit vs Temperature
p1 <- ggplot(tz_malaria, aes(x = Temperature, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "blue") +
labs(title = "Empirical logit vs Temperature",
x = "Temperature (°C)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs Precipitation
p2 <- ggplot(tz_malaria, aes(x = Precipitation, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "red") +
labs(title = "Empirical logit vs Precipitation",
x = "Precipitation (mm)",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs EVI
p3 <- ggplot(tz_malaria, aes(x = EVI, y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "green") +
labs(title = "Empirical logit vs EVI",
x = "EVI",
y = "Empirical logit") +
theme_minimal()
# Scatter plot for elogit vs NTL
p4 <- ggplot(tz_malaria, aes(x = log(NTL), y = elogit)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "gam", formula = y ~ s(x, bs = "cs"), color = "purple") +
labs(title = "Empirical logit vs NTL",
x = "log-NTL",
y = "Empirical logit") +
theme_minimal()
# Display the plots
print(p1)
print(p2)
print(p3)
print(p4)
# Point 2
library(lme4)
tz_malaria$cluster.number
fit_bin <- glmer(cbind(Pf, Ex-Pf) ~
Temperatue + I(Temperature^2) + (1|cluster.number),
family = "Binomial")
fit_bin <- glmer(cbind(Pf, Ex-Pf) ~
Temperatue + I(Temperature^2) + (1|cluster.number),
family = binomial)
fit_bin <- glmer(cbind(Pf, Ex-Pf) ~
Temperatue + I(Temperature^2) + (1|cluster.number),
data = tz_malaria,
family = binomial)
fit_bin <- glmer(cbind(Pf, Ex-Pf) ~
Temperature + I(Temperature^2) + (1|cluster.number),
data = tz_malaria,
family = binomial)
fit_bin <- glm(cbind(Pf, Ex-Pf) ~
Temperature + I(Temperature^2),
data = tz_malaria,
family = binomial)
summary(fit_bin)
sary libraries
