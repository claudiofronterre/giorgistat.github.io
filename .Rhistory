data = malkenya_comm, family = binomial)
summary(glm_age_gender_interaction)
# Alternative model without interaction terms
glm_age_gender_no_interaction <- glm(RDT ~ Age +  pmax(Age-15, 0) + pmax(Age-40, 0),
data = malkenya_comm, family = binomial)
# Compare models using Chi-square test
anova(glm_age_gender_no_interaction, glm_age_gender_interaction, test = "Chisq")
# Elevation Analysis
# Group elevation into quantiles to analyze relationship with RDT
tibble::glimpse(malkenya_comm)
malkenya_comm$elevation_class <- cut(malkenya_comm$elevation,
breaks = quantile(malkenya_comm$elevation, seq(0, 1, by = 0.1)),
include.lowest = TRUE)
# Compute empirical logit by elevation class
elev_class_data <- aggregate(RDT ~ elevation_class,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute average elevation within each class
elev_class_data$elevation_mean <- aggregate(elevation ~ elevation_class,
data = malkenya_comm,
FUN = mean)$elevation
# Visualizing empirical logit by elevation
ggplot(elev_class_data, aes(x = elevation_mean, y = RDT),
size = n_obs) +
geom_point() +
labs(x="Elevation (meters)",y="Empirical logit")
malkenya_comm$Age_class <- cut(malkenya_comm$Age,
breaks = c(0, 5, 10, 15, 30, 40, 50, 100),
include.lowest = TRUE)
# Compute empirical logit within each age group
tibble::glimpse(malkenya_comm)
age_class_data <- aggregate(RDT ~ Age_class + Gender,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
age_class_data <- aggregate(RDT ~ Age_class + Gender,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute the average age within each group
age_class_data$age_mean_point <- aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = mean)$Age
# Visualizing empirical logit by age groups
ggplot(age_class_data, aes(x = age_mean_point, y = RDT,
size = n_obs,
colour = Gender)) +
geom_point() +
labs(x="Age (years)",y="Empirical logit")
age_class_data <- aggregate(RDT ~ Age_class + Gender,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute the average age within each group
age_class_data$age_mean_point <- aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = mean)$Age
# Compute number of individuals per age group by gender
age_class_data$n_obs <-  aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = length)$Age
# Visualizing empirical logit by age groups
ggplot(age_class_data, aes(x = age_mean_point, y = RDT,
size = n_obs,
colour = Gender)) +
geom_point() +
labs(x="Age (years)",y="Empirical logit")
malkenya_comm$elevation_class <- cut(malkenya_comm$elevation,
breaks = quantile(malkenya_comm$elevation, seq(0, 1, by = 0.1)),
include.lowest = TRUE)
# Compute empirical logit by elevation class
elev_class_data <- aggregate(RDT ~ elevation_class,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute average elevation within each class
elev_class_data$elevation_mean <- aggregate(elevation ~ elevation_class,
data = malkenya_comm,
FUN = mean)$elevation
# Visualizing empirical logit by elevation
ggplot(elev_class_data, aes(x = elevation_mean, y = RDT),
size = n_obs) +
geom_point() +
labs(x="Elevation (meters)",y="Empirical logit")
# Clear the workspace
rm(list = ls())
# Load necessary libraries
library(RiskMap)  # For RiskMap functionality
library(lme4)    # For mixed-effects models
data("liberia")   # Load the Liberia dataset
# Create a unique ID for each location in the Liberia dataset
liberia$ID_loc <- 1:nrow(liberia)
# Fit a binomial mixed-effects model with log-elevation as a fixed effect and location as a random effect
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc),
family = binomial, data = liberia, nAGQ = 25)
?glmer
# Fit a binomial mixed-effects model with log-elevation as a fixed effect and location as a random effect
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc),
family = binomial, data = liberia, nAGQ = 100)
# Fit a binomial mixed-effects model with log-elevation as a fixed effect and location as a random effect
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc),
family = binomial, data = liberia, nAGQ = 100)
# Summarize the model results
summary(fit_glmer_lib)
# Convert Liberia data to an sf object with WGS84 (EPSG:4326) CRS
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
propose_utm(liberia_sf)
# Download Liberia's administrative boundary (ADM0 level)
shp_lb <- geoboundaries(country = "liberia", adm_lvl = "adm0")
### Get the shapefile for Liberia
library(rgeoboundaries)
# Download Liberia's administrative boundary (ADM0 level)
shp_lb <- geoboundaries(country = "liberia", adm_lvl = "adm0")
shp_lb
# Transform the shapefile to the proposed UTM CRS
shp_lb <- st_transform(shp_lb, crs = crs_lb)
# Propose a UTM CRS for Liberia
crs_lb <- propose_utm(liberia_sf)
# Transform the shapefile to the proposed UTM CRS
shp_lb <- st_transform(shp_lb, crs = crs_lb)
shp_lb
# Create a grid over Liberia with a spatial resolution of 5 km
grid_utm <- create_grid(shp_lb, spat_res = 5)
shp_lb
### Get elevation raster for Liberia
library(elevatr)
# Download elevation data for Liberia at zoom level 5 and clip it to the country boundary
elev_lb <- get_elev_raster(locations = shp_lb, z = 5, clip = "locations")
plot(shp_lb)
plot(elev_lb)
# Convert the elevation raster to a data frame for use with ggplot2
library(terra)
elev_lb
# Convert the elevation raster to a data frame for use with ggplot2
library(terra)
plot(elev_lb)
plot(grid_utm)
ggplot(data = raster_df) +
geom_raster(aes(x = x, y = y, fill = elev)) +  # Plot elevation as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Elevation", fill = "Density") +  # Add title and legend label
geom_sf(data = shp_lb, col = 2, lwd = 2, fill = NA)  # Overlay Liberia boundary
raster_df <- as.data.frame(elev_lb, xy = TRUE)
colnames(raster_df)[3] <- "elev"  # Rename the elevation column
# Plot the elevation raster using ggplot2
library(ggplot2)
ggplot(data = raster_df) +
geom_raster(aes(x = x, y = y, fill = elev)) +  # Plot elevation as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Elevation", fill = "Density") +  # Add title and legend label
geom_sf(data = shp_lb, col = 2, lwd = 2, fill = NA)  # Overlay Liberia boundary
?extract
ggplot(data = raster_df) +
geom_raster(aes(x = x, y = y, fill = elev)) +  # Plot elevation as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Elevation", fill = "Density") +  # Add title and legend label
geom_sf(data = shp_lb, col = 2, lwd = 2, fill = NA)  # Overlay Liberia boundary
extract(elev_lb, st_coordinates(grid_utm))
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm)))
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm)))
# Predict prevalence using the fitted model
pred_glmer <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response", re.form = NA)
# Predict prevalence using the fitted model
pred_glmer <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response", re.form = NA)
# Create a data frame with predicted prevalence and grid coordinates
raster_pred <- data.frame(x = st_coordinates(grid_utm)[, 1],
y = st_coordinates(grid_utm)[, 2],
prev = pred_glmer)
# Plot the predicted prevalence using ggplot2
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +  # Plot prevalence as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Predictions", fill = "Prevalence")  # Add title and legend label
rm(list = ls())
library(RiskMap)
library(lme4)
library(sf)
data("liberia")
# Create the ID of the location
liberia$ID_loc <- 1:nrow(liberia)
# Binomial mixed model with log-elevation
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc), family = binomial,
data = liberia, nAGQ = 25)
summary(fit_glmer_lib)
ranef(fit_glmer_lib)$ID_loc[,1]
liberia$Z_hat <- ranef(fit_glmer_lib)$ID_loc[,1]
liberia <- st_as_sf(liberia, coords = c("long", "lat"),
crs=4326)
crs_lb <- propose_utm(liberia)
liberia <- st_transform(liberia, crs = crs_lb)
liberia_variog <- s_variogram(data = liberia,
variable = "Z_hat",
bins = c(15, 30, 40, 80, 120,
160, 200, 250, 300, 350),
scale_to_km = TRUE,
n_permutation = 10000)
liberia_variog <- s_variogram(data = liberia,
variable = "Z_hat",
scale_to_km = TRUE,
n_permutation = 10000)
plot_s_variogram(liberia_variog)
liberia_variog <- s_variogram(data = liberia,
variable = "Z_hat",
bins = c(15, 30, 40, 80, 120,
160, 200, 250, 300, 350),
scale_to_km = TRUE,
n_permutation = 10000)
plot_s_variogram(liberia_variog)
liberia_variog <- s_variogram(data = liberia,
variable = "Z_hat",
bins = c(15, 30, 40, 80, 120,
160, 200, 250, 300, 350),
scale_to_km = TRUE,
n_permutation = 10000)
plot_s_variogram(liberia_variog,
plot_envelope = TRUE)
library(shiny)
library(ggplot2)
library(gstat)
library(sp)
library(gridExtra)
library(sf)
# Matern correlation function
matern_corr <- function(h, kappa, phi) {
if (h == 0) return(1)
factor <- (2^(1 - kappa)) / gamma(kappa)
scaled_h <- h / phi
factor * (scaled_h^kappa) * besselK(scaled_h, kappa)
}
# UI
ui <- fluidPage(
titlePanel("MatÃ©rn GP Simulator"),
sidebarLayout(
sidebarPanel(
numericInput("phi", "Phi (scale parameter):", 0.1, min = 0.01, max = 1, step = 0.01),
numericInput("kappa", "Kappa (smoothness):", 2.5, min = 0.5, max = 5, step = 0.1),
numericInput("sigma2", "Sigma^2 (variance):", 1, min = 0.1, max = 5, step = 0.1),
actionButton("simulate", "Generate Plots")
),
mainPanel(
plotOutput("maternPlot"),
plotOutput("simulationPlot")
)
)
)
# Server function
server <- function(input, output) {
observeEvent(input$simulate, {
h_vals <- seq(0, sqrt(2), length.out = 100)
corr_vals <- sapply(h_vals, matern_corr, kappa = input$kappa, phi = input$phi)
output$maternPlot <- renderPlot({
ggplot(data.frame(h = h_vals, corr = corr_vals), aes(x = h, y = corr)) +
geom_line() +
labs(title = "MatÃ©rn Correlation Function", x = "Distance h", y = "Correlation")
})
# Simulating a Spatial Field
grid_size <- 50
x <- seq(0, 1, length.out = grid_size)
y <- seq(0, 1, length.out = grid_size)
grid <- expand.grid(x = x, y = y)
coordinates(grid) <- ~x + y
grid <- st_as_sf(grid)
st_crs(grid) <- 3857
# Define the variogram model (MatÃ©rn covariance)
sim_res <-
glgpm_sim(n_sim = 1,
formula = ~ gp(kappa = input$kappa),
data = grid,
family = "gaussian",
crs = 3857,
sim_pars = list(beta = 0, sigma2 = input$sigma2,
phi = input$phi,
tau2 = 0, sigma2_me = 0),
scale_to_km = FALSE)
# Convert the result to a data frame for ggplot
sim_df <- data.frame(x = st_coordinates(grid)[,1],
y = st_coordinates(grid)[,2],
value = sim_res$data_sim$`_sim1`)
output$simulationPlot <- renderPlot({
ggplot(sim_df, aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Simulated MatÃ©rn GP Surface", fill = "Value")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(RiskMap)
load("../MDA modelling/st_dast_fe_compare_v2.RData")
summary(dast_asc)
summary(dast_tt)
summary(dast_hkw)
summary(dast_asc)
summary(dast_tt)
summary(dast_hkw)
install.packages(c("knitr", "kableExtra", "tidyverse")) # Add tidyverse if you use it
install.packages(c("knitr", "kableExtra", "tidyverse")) # Add tidyverse if you use it
library(ggplot2)
# Create time sequence (-5 to 20 years)
time <- seq(-10, 20, by = 0.1)
# Define Gamma-shaped MDA impact function
gamma_impact <- function(t) {
# Parameters for Gamma distribution (shape=3, rate=0.7 gives mode around 3)
dgamma(pmax(0, t), shape = 3, rate = 0.7) * 15 # Scaled for visibility
}
# Find the mode (peak time) of the Gamma distribution
mode_time <- (3 - 1)/0.7  # (shape-1)/rate
peak_impact <- gamma_impact(mode_time)
# Exponential decay starting at mode
exp_decay <- function(t) {
peak_impact * exp(-0.25 * (t - mode_time))
}
# Create data frame
impact_data <- data.frame(
Time = time,
Impact = ifelse(time < 0, 0, gamma_impact(time)),
Exponential_Fit = ifelse(time >= mode_time, exp_decay(time), NA)
)
# Calculate optimal text positions
text_y_pos <- max(impact_data$Impact, na.rm = TRUE) * c(0.9, 0.7, 0.5)
text_x_pos <- c(mode_time + 3, mode_time + 3, 5)
# Plot
ggplot(impact_data, aes(x = Time)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
geom_line(aes(y = Impact), color = "black", linewidth = 1.2) +
geom_line(aes(y = Exponential_Fit), color = "green", linetype = "dashed", linewidth = 1, na.rm = TRUE) +
# Annotations with non-overlapping positions
annotate("text", x = -2.5, y = 0.1*max(impact_data$Impact, na.rm = TRUE),
label = "Baseline", color = "black", hjust = 0.5) +
annotate("text", x = -9, y = 0.6*max(impact_data$Impact, na.rm = TRUE),
label = "MDA Implementation", color = "blue", hjust = 0) +
annotate("text", x = text_x_pos[2], y = text_y_pos[2],
label = "MDA Impact Approximation", color = "green", hjust = 0) +
geom_vline(xintercept = mode_time, linetype = "dotted", color = "gray50") +
annotate("text", x = mode_time+3, y = 0,
label = "Impact Survey", vjust = 1.5, color = "gray30") +
labs(title = "Impact of Mass Drug Administration (MDA) Over Time",
x = "Time (years)",
y = "Relative Prevalence Reduction",
caption = "Blue dashed line: MDA implementation time\nGreen dashed line: Decay approximation from geostatistical model") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0)) +
ylim(0, max(impact_data$Impact, na.rm = TRUE) * 1.1) +
# Ensure no text overlap
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1, 1, 1.5, 1), "lines"))
library(ggplot2)
# Create time sequence (-5 to 20 years)
time <- seq(-10, 20, by = 0.1)
# Define Gamma-shaped MDA impact function
gamma_impact <- function(t) {
# Parameters for Gamma distribution (shape=3, rate=0.7 gives mode around 3)
dgamma(pmax(0, t), shape = 3, rate = 0.7) * 15 # Scaled for visibility
}
# Find the mode (peak time) of the Gamma distribution
mode_time <- (3 - 1)/0.7  # (shape-1)/rate
peak_impact <- gamma_impact(mode_time)
# Exponential decay starting at mode
exp_decay <- function(t) {
peak_impact * exp(-0.25 * (t - mode_time))
}
# Create data frame
impact_data <- data.frame(
Time = time,
Impact = ifelse(time < 0, 0, gamma_impact(time)),
Exponential_Fit = ifelse(time >= mode_time, exp_decay(time), NA)
)
# Calculate optimal text positions
text_y_pos <- max(impact_data$Impact, na.rm = TRUE) * c(0.9, 0.7, 0.5)
text_x_pos <- c(mode_time + 3, mode_time + 3, 5)
# Plot
ggplot(impact_data, aes(x = Time)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
geom_line(aes(y = Impact), color = "black", linewidth = 1.2) +
geom_line(aes(y = Exponential_Fit), color = "green", linetype = "dashed", linewidth = 1, na.rm = TRUE) +
# Annotations with non-overlapping positions
annotate("text", x = -2.5, y = 0.1*max(impact_data$Impact, na.rm = TRUE),
label = "Baseline", color = "black", hjust = 0.5) +
annotate("text", x = -9, y = 0.6*max(impact_data$Impact, na.rm = TRUE),
label = "MDA Implementation", color = "blue", hjust = 0) +
annotate("text", x = text_x_pos[2], y = text_y_pos[2],
label = "MDA Impact Approximation", color = "green", hjust = 0) +
geom_vline(xintercept = mode_time, linetype = "dotted", color = "gray50") +
annotate("text", x = mode_time+3, y = 0,
label = "Impact Survey", vjust = 1.5, color = "gray30") +
labs(title = "Impact of Mass Drug Administration (MDA) Over Time",
x = "Time (years)",
y = "Relative Prevalence Reduction") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0)) +
ylim(0, max(impact_data$Impact, na.rm = TRUE) * 1.1) +
# Ensure no text overlap
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1, 1, 1.5, 1), "lines"))
png("MDA_impact.png")
ggplot(impact_data, aes(x = Time)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
geom_line(aes(y = Impact), color = "black", linewidth = 1.2) +
geom_line(aes(y = Exponential_Fit), color = "green", linetype = "dashed", linewidth = 1, na.rm = TRUE) +
# Annotations with non-overlapping positions
annotate("text", x = -2.5, y = 0.1*max(impact_data$Impact, na.rm = TRUE),
label = "Baseline", color = "black", hjust = 0.5) +
annotate("text", x = -9, y = 0.6*max(impact_data$Impact, na.rm = TRUE),
label = "MDA Implementation", color = "blue", hjust = 0) +
annotate("text", x = text_x_pos[2], y = text_y_pos[2],
label = "MDA Impact Approximation", color = "green", hjust = 0) +
geom_vline(xintercept = mode_time, linetype = "dotted", color = "gray50") +
annotate("text", x = mode_time+3, y = 0,
label = "Impact Survey", vjust = 1.5, color = "gray30") +
labs(title = "Impact of Mass Drug Administration (MDA) Over Time",
x = "Time (years)",
y = "Relative Prevalence Reduction") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0)) +
ylim(0, max(impact_data$Impact, na.rm = TRUE) * 1.1) +
# Ensure no text overlap
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1, 1, 1.5, 1), "lines"))
dev.off()
# Plot
pdf("MDA_impact.png",width=8, height = 8)
ggplot(impact_data, aes(x = Time)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
geom_line(aes(y = Impact), color = "black", linewidth = 1.2) +
geom_line(aes(y = Exponential_Fit), color = "green", linetype = "dashed", linewidth = 1, na.rm = TRUE) +
# Annotations with non-overlapping positions
annotate("text", x = -2.5, y = 0.1*max(impact_data$Impact, na.rm = TRUE),
label = "Baseline", color = "black", hjust = 0.5) +
annotate("text", x = -9, y = 0.6*max(impact_data$Impact, na.rm = TRUE),
label = "MDA Implementation", color = "blue", hjust = 0) +
annotate("text", x = text_x_pos[2], y = text_y_pos[2],
label = "MDA Impact Approximation", color = "green", hjust = 0) +
geom_vline(xintercept = mode_time, linetype = "dotted", color = "gray50") +
annotate("text", x = mode_time+3, y = 0,
label = "Impact Survey", vjust = 1.5, color = "gray30") +
labs(title = "Impact of Mass Drug Administration (MDA) Over Time",
x = "Time (years)",
y = "Relative Prevalence Reduction") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0)) +
ylim(0, max(impact_data$Impact, na.rm = TRUE) * 1.1) +
# Ensure no text overlap
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1, 1, 1.5, 1), "lines"))
dev.off()
# Plot
pdf("MDA_impact.pdf",width=8, height = 8)
ggplot(impact_data, aes(x = Time)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
geom_line(aes(y = Impact), color = "black", linewidth = 1.2) +
geom_line(aes(y = Exponential_Fit), color = "green", linetype = "dashed", linewidth = 1, na.rm = TRUE) +
# Annotations with non-overlapping positions
annotate("text", x = -2.5, y = 0.1*max(impact_data$Impact, na.rm = TRUE),
label = "Baseline", color = "black", hjust = 0.5) +
annotate("text", x = -9, y = 0.6*max(impact_data$Impact, na.rm = TRUE),
label = "MDA Implementation", color = "blue", hjust = 0) +
annotate("text", x = text_x_pos[2], y = text_y_pos[2],
label = "MDA Impact Approximation", color = "green", hjust = 0) +
geom_vline(xintercept = mode_time, linetype = "dotted", color = "gray50") +
annotate("text", x = mode_time+3, y = 0,
label = "Impact Survey", vjust = 1.5, color = "gray30") +
labs(title = "Impact of Mass Drug Administration (MDA) Over Time",
x = "Time (years)",
y = "Relative Prevalence Reduction") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0)) +
ylim(0, max(impact_data$Impact, na.rm = TRUE) * 1.1) +
# Ensure no text overlap
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1, 1, 1.5, 1), "lines"))
dev.off()
# Plot
pdf("MDA_impact.pdf",width=8, height = 8)
ggplot(impact_data, aes(x = Time)) +
geom_vline(xintercept = 0, linetype = "dashed", color = "blue") +
geom_line(aes(y = Impact), color = "black", linewidth = 1.2) +
geom_line(aes(y = Exponential_Fit), color = "green", linetype = "dashed", linewidth = 1, na.rm = TRUE) +
# Annotations with non-overlapping positions
annotate("text", x = -2.5, y = 0.1*max(impact_data$Impact, na.rm = TRUE),
label = "Baseline", color = "black", hjust = 0.5) +
annotate("text", x = -9, y = 0.6*max(impact_data$Impact, na.rm = TRUE),
label = "MDA Implementation", color = "blue", hjust = 0) +
annotate("text", x = text_x_pos[2], y = text_y_pos[2],
label = "MDA Impact Approximation", color = "green", hjust = 0) +
geom_vline(xintercept = mode_time, linetype = "dotted", color = "gray50") +
annotate("text", x = mode_time+3, y = 0,
label = "Impact Survey", vjust = 1.5, color = "gray30") +
labs(title = "Impact of Mass Drug Administration (MDA) Over Time",
x = "Time (years)",
y = "Relative Prevalence Reduction") +
theme_minimal() +
theme(plot.caption = element_text(hjust = 0)) +
ylim(0, max(impact_data$Impact, na.rm = TRUE) * 1.1) +
# Ensure no text overlap
coord_cartesian(clip = "off") +
theme(plot.margin = unit(c(1, 1, 1.5, 1), "lines"))
dev.off()
