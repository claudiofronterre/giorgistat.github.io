sim_res <-
glgpm_sim(n_sim = 1,
formula = ~ gp(kappa = input$kappa),
data = grid,
family = "gaussian",
crs = 3857,
sim_pars = list(beta = 0, sigma2 = input$sigma2,
phi = input$phi,
tau2 = 0, sigma2_me = 0),
scale_to_km = FALSE)
# Convert the result to a data frame for ggplot
sim_df <- data.frame(x = st_coordinates(grid)[,1],
y = st_coordinates(grid)[,2],
value = sim_res$data_sim$`_sim1`)
output$simulationPlot <- renderPlot({
ggplot(sim_df, aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Simulated Matérn GP Surface", fill = "Value")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(gstat)
library(sp)
library(gridExtra)
library(sf)
# Matern correlation function
matern_corr <- function(h, kappa, phi) {
if (h == 0) return(1)
factor <- (2^(1 - kappa)) / gamma(kappa)
scaled_h <- h / phi
factor * (scaled_h^kappa) * besselK(scaled_h, kappa)
}
# UI
ui <- fluidPage(
titlePanel("Matérn GP Simulator"),
sidebarLayout(
sidebarPanel(
numericInput("phi", "Phi (scale parameter):", 0.1, min = 0.01, max = 1, step = 0.01),
numericInput("kappa", "Kappa (smoothness):", 2.5, min = 0.5, max = 5, step = 0.1),
numericInput("sigma2", "Sigma^2 (variance):", 1, min = 0.1, max = 5, step = 0.1),
actionButton("simulate", "Generate Plots")
),
mainPanel(
plotOutput("maternPlot"),
plotOutput("simulationPlot")
)
)
)
# Server function
server <- function(input, output) {
observeEvent(input$simulate, {
h_vals <- seq(0, sqrt(2), length.out = 100)
corr_vals <- sapply(h_vals, matern_corr, kappa = input$kappa, phi = input$phi)
output$maternPlot <- renderPlot({
ggplot(data.frame(h = h_vals, corr = corr_vals), aes(x = h, y = corr)) +
geom_line() +
labs(title = "Matérn Correlation Function", x = "Distance h", y = "Correlation")
})
# Simulating a Spatial Field
grid_size <- 50
x <- seq(0, 1, length.out = grid_size)
y <- seq(0, 1, length.out = grid_size)
grid <- expand.grid(x = x, y = y)
coordinates(grid) <- ~x + y
grid <- st_as_sf(grid)
st_crs(grid) <- 3857
# Define the variogram model (Matérn covariance)
sim_res <-
glgpm_sim(n_sim = 1,
formula = ~ gp(kappa = input$kappa),
data = grid,
family = "gaussian",
crs = 3857,
sim_pars = list(beta = 0, sigma2 = input$sigma2,
phi = input$phi,
tau2 = 0, sigma2_me = 0),
scale_to_km = FALSE)
# Convert the result to a data frame for ggplot
sim_df <- data.frame(x = st_coordinates(grid)[,1],
y = st_coordinates(grid)[,2],
value = sim_res$data_sim$`_sim1`)
output$simulationPlot <- renderPlot({
ggplot(sim_df, aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Simulated Matérn GP Surface", fill = "Value")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(gstat)
library(sp)
library(gridExtra)
library(sf)
# Matern correlation function
matern_corr <- function(h, kappa, phi) {
if (h == 0) return(1)
factor <- (2^(1 - kappa)) / gamma(kappa)
scaled_h <- h / phi
factor * (scaled_h^kappa) * besselK(scaled_h, kappa)
}
# UI
ui <- fluidPage(
titlePanel("Matérn GP Simulator"),
sidebarLayout(
sidebarPanel(
numericInput("phi", "Phi (scale parameter):", 0.1, min = 0.01, max = 1, step = 0.01),
numericInput("kappa", "Kappa (smoothness):", 2.5, min = 0.5, max = 5, step = 0.1),
numericInput("sigma2", "Sigma^2 (variance):", 1, min = 0.1, max = 5, step = 0.1),
actionButton("simulate", "Generate Plots")
),
mainPanel(
plotOutput("maternPlot"),
plotOutput("simulationPlot")
)
)
)
# Server function
server <- function(input, output) {
observeEvent(input$simulate, {
h_vals <- seq(0, sqrt(2), length.out = 100)
corr_vals <- sapply(h_vals, matern_corr, kappa = input$kappa, phi = input$phi)
output$maternPlot <- renderPlot({
ggplot(data.frame(h = h_vals, corr = corr_vals), aes(x = h, y = corr)) +
geom_line() +
labs(title = "Matérn Correlation Function", x = "Distance h", y = "Correlation")
})
# Simulating a Spatial Field
grid_size <- 50
x <- seq(0, 1, length.out = grid_size)
y <- seq(0, 1, length.out = grid_size)
grid <- expand.grid(x = x, y = y)
coordinates(grid) <- ~x + y
grid <- st_as_sf(grid)
st_crs(grid) <- 3857
# Define the variogram model (Matérn covariance)
sim_res <-
glgpm_sim(n_sim = 1,
formula = ~ gp(kappa = input$kappa),
data = grid,
family = "gaussian",
crs = 3857,
sim_pars = list(beta = 0, sigma2 = input$sigma2,
phi = input$phi,
tau2 = 0, sigma2_me = 0),
scale_to_km = FALSE)
# Convert the result to a data frame for ggplot
sim_df <- data.frame(x = st_coordinates(grid)[,1],
y = st_coordinates(grid)[,2],
value = sim_res$data_sim$`_sim1`)
output$simulationPlot <- renderPlot({
ggplot(sim_df, aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Simulated Matérn GP Surface", fill = "Value")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(gstat)
library(sp)
library(gridExtra)
library(sf)
# Matern correlation function
matern_corr <- function(h, kappa, phi) {
if (h == 0) return(1)
factor <- (2^(1 - kappa)) / gamma(kappa)
scaled_h <- h / phi
factor * (scaled_h^kappa) * besselK(scaled_h, kappa)
}
# UI
ui <- fluidPage(
titlePanel("Matérn GP Simulator"),
sidebarLayout(
sidebarPanel(
numericInput("phi", "Phi (scale parameter):", 0.1, min = 0.01, max = 1, step = 0.01),
numericInput("kappa", "Kappa (smoothness):", 2.5, min = 0.5, max = 5, step = 0.1),
numericInput("sigma2", "Sigma^2 (variance):", 1, min = 0.1, max = 5, step = 0.1),
actionButton("simulate", "Generate Plots")
),
mainPanel(
plotOutput("maternPlot"),
plotOutput("simulationPlot")
)
)
)
# Server function
server <- function(input, output) {
observeEvent(input$simulate, {
h_vals <- seq(0, sqrt(2), length.out = 100)
corr_vals <- sapply(h_vals, matern_corr, kappa = input$kappa, phi = input$phi)
output$maternPlot <- renderPlot({
ggplot(data.frame(h = h_vals, corr = corr_vals), aes(x = h, y = corr)) +
geom_line() +
labs(title = "Matérn Correlation Function", x = "Distance h", y = "Correlation")
})
# Simulating a Spatial Field
grid_size <- 50
x <- seq(0, 1, length.out = grid_size)
y <- seq(0, 1, length.out = grid_size)
grid <- expand.grid(x = x, y = y)
coordinates(grid) <- ~x + y
grid <- st_as_sf(grid)
st_crs(grid) <- 3857
# Define the variogram model (Matérn covariance)
sim_res <-
glgpm_sim(n_sim = 1,
formula = ~ gp(kappa = input$kappa),
data = grid,
family = "gaussian",
crs = 3857,
sim_pars = list(beta = 0, sigma2 = input$sigma2,
phi = input$phi,
tau2 = 0, sigma2_me = 0),
scale_to_km = FALSE)
# Convert the result to a data frame for ggplot
sim_df <- data.frame(x = st_coordinates(grid)[,1],
y = st_coordinates(grid)[,2],
value = sim_res$data_sim$`_sim1`)
output$simulationPlot <- renderPlot({
ggplot(sim_df, aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = "Simulated Matérn GP Surface", fill = "Value")
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
rm(list = ls())
library(RiskMap)
data(""galicia"")
data("galicia")
?galicia
galicia$lead
galicia <- st_as_sf(galicia, coords = c("x", "y"),
crs = 32629)
ggplot() + geom_sf(data = galicia, fill = lead)
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
# Assuming 'galicia' is already loaded as a data frame
# Convert to an sf object
galicia <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
# Plot the data
ggplot() +
geom_sf(data = galicia, aes(fill = lead))
galicia$lead
# Plot the data
leaflet::leaflet(galicia)
rm(list = ls())
library(RiskMap)
library(sf)
data("galicia")
# Convert to an sf object
galicia <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
# Plot the data
leaflet::leaflet(galicia)
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Plot the data
leaflet::leaflet(galicia)
ggplot(data = galicia) +
geom_sf(aes(color = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
ggplot(data = galicia) +
geom_sf(aes(color = lead)) +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia) +
geom_sf(aes(color = lead)) +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia) +
geom_sf(aes(color = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
ggplot(data = galicia) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia_sf <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia_sf) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia_sf <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia_sf) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
lm_fit <- lm(log(lead) ~ 1, data = galicia)
galicia$residuals <- lm_fit$residuals
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
lm_fit <- lm(log(lead) ~ 1, data = galicia)
galicia$residuals <- lm_fit$residuals
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia_sf <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia_sf) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
lm_fit <- lm(log(lead) ~ 1, data = galicia_sf)
galicia_sf$residuals <- lm_fit$residuals
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
# Plotting the results
plot_s_variogram(galicia_variog, plot_envelope = TRUE)
# Plotting the results
plot_s_variogram(galicia_variog, plot_envelope = TRUE)
# Fit a linear geostatistical model
fit_galicia <-
glgpm(log(lead) ~ gp(x, y, kappa = 1.5), data=galicia, family = "gaussian",
crs = 32629, scale_to_km = TRUE, messages = FALSE)
summary(fit_galicia)
coef(fit_galicia)
par_hat <- coef(fit_galicia)
par_hat$sigma2
par_hat$phi
# Given parameters
sigma2 <- par_hat$sigma2
phi <- par_hat$phi
# Compute the practical range where correlation = 0.05
practical_range <- -phi * log(0.05)
# Define distance values for plotting
h <- seq(0, practical_range * 1.2, length.out = 100)
variogram <- sigma2 * (1 - exp(-h / phi))
# Plot the variogram
plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Semivariance γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Plot the variogram
plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Variogram γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Add vertical line for practical range
abline(v = practical_range, col = "red", lty = 2)
# Add legend
legend("bottomright", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia_sf <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia_sf) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
lm_fit <- lm(log(lead) ~ 1, data = galicia_sf)
galicia_sf$residuals <- lm_fit$residuals
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
# Plotting the results
plot_s_variogram(galicia_variog, plot_envelope = TRUE)
# Fit a linear geostatistical model
fit_galicia <-
glgpm(log(lead) ~ gp(x, y, kappa = 1.5), data=galicia, family = "gaussian",
crs = 32629, scale_to_km = TRUE, messages = FALSE)
summary(fit_galicia)
# Given parameters
sigma2 <- par_hat$sigma2
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("galicia")
# Convert to an sf object
galicia_sf <- st_as_sf(galicia, coords = c("x", "y"), crs = 32629)
ggplot(data = galicia_sf) +
geom_sf(aes(color = lead, size = lead)) +
scale_color_viridis_c() +
theme_minimal() +
labs(title = "",
color = "Lead conc.")
lm_fit <- lm(log(lead) ~ 1, data = galicia_sf)
galicia_sf$residuals <- lm_fit$residuals
# Compute the variogram, using the residuals from the linear model fit,
# and the 95% confidence level envelope for spatial independence
galicia_variog <- s_variogram(galicia_sf, variable = "residuals",
scale_to_km = TRUE,
bins = seq(10, 140, length = 15),
n_permutation = 10000)
# Plotting the results
plot_s_variogram(galicia_variog, plot_envelope = TRUE)
# Fit a linear geostatistical model
fit_galicia <-
glgpm(log(lead) ~ gp(x, y, kappa = 1.5), data=galicia, family = "gaussian",
crs = 32629, scale_to_km = TRUE, messages = FALSE)
summary(fit_galicia)
# Maximum likelihood estimates
par_hat <- coef(fit_galicia)
# Given parameters
sigma2 <- par_hat$sigma2
phi <- par_hat$phi
# Compute the practical range where correlation = 0.05
practical_range <- -phi * log(0.05)
# Define distance values for plotting
h <- seq(0, practical_range * 1.2, length.out = 100)
variogram <- sigma2 * (1 - exp(-h / phi))
# Plot the variogram
plot(h, variogram, type = "l", col = "blue", lwd = 2,
xlab = "Distance (h)", ylab = "Variogram γ(h)",
main = "Theoretical Variogram (Exponential Model)")
# Add vertical line for practical range
abline(v = practical_range, col = "red", lty = 2)
# Add legend
legend("upperleft", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
# Add legend
legend("topleft", legend = c("Theoretical Variogram", "Practical Range"),
col = c("blue", "red"), lty = c(1, 2), lwd = c(2, 1))
library(elevatr)
