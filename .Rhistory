tza_weights <- extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
tza_weights
tza_weights <- extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_0,
weights = tza_weights,
standardize_weights = FALSE,
shp_target = sum,
pd_summary = list(mean = mean,
lower = function(x) quantile(x, 0.025),
upper = function(x) quantile(x, 0.975)),
col_names = "shapeName")
pred_T_adm1
pred_T_adm1$target$Tanzania$prev
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_counts_2015.tif.tif")
tza_pop <- project(tza_pop, "EPSG:32736")
st_coordinates(grid_tza)
grid_tza
distgrid_tza
dist_summaries(grid_tza)
dist_summaries(st_as_sf(grid_tza))
tza_weights <- 10*extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
tza_weights
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_0,
weights = tza_weights,
standardize_weights = FALSE,
shp_target = sum,
pd_summary = list(mean = mean,
lower = function(x) quantile(x, 0.025),
upper = function(x) quantile(x, 0.975)),
col_names = "shapeName")
pred_T_adm1$target$Tanzania$prev
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_counts_2015.tif.tif")
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_counts_2015.tif")
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_counts_2015.tif")
tza_pop <- project(tza_pop, "EPSG:32736")
tza_weights <- 10*extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_counts_2015.tif")
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_counts_2015.tif")
tza_pop <- project(tza_pop, "EPSG:32736")
tza_weights <- 10*extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
tza_weights
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_0,
weights = tza_weights,
standardize_weights = FALSE,
shp_target = sum,
pd_summary = list(mean = mean,
lower = function(x) quantile(x, 0.025),
upper = function(x) quantile(x, 0.975)),
col_names = "shapeName")
pred_T_adm1$target$Tanzania$prev
tza_weights <- extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_0,
weights = tza_weights,
standardize_weights = FALSE,
shp_target = sum,
pd_summary = list(mean = mean,
lower = function(x) quantile(x, 0.025),
upper = function(x) quantile(x, 0.975)),
col_names = "shapeName")
pred_T_adm1$target$Tanzania$prev
tza_pop <- rast("teaching/MBG/Data/Tanzania_population_density_2015.tif")
tza_pop <- project(tza_pop, "EPSG:32736")
# Extract covariates over the grid
pred_tza <- data.frame(EVI = extract(tza_evi, st_as_sf(grid_tza))[,2],
Temperature = extract(tza_temp, st_as_sf(grid_tza))[,2])
pred_S_tza_cov <-
pred_over_grid(glgm_fit, predictors = pred_tza,
grid_pred = grid_tza, type="joint")
tza_weights <- 10*extract(tza_pop, pred_S_tza_cov$grid_pred)[,2]
pred_T_adm1 <-
pred_target_shp(pred_S_tza_cov,
f_target = list(prev = function(x) exp(x)/(1+exp(x))),
shp = shp_tz_0,
weights = tza_weights,
standardize_weights = FALSE,
shp_target = sum,
pd_summary = list(mean = mean,
lower = function(x) quantile(x, 0.025),
upper = function(x) quantile(x, 0.975)),
col_names = "shapeName")
pred_T_adm1$target$Tanzania$prev
################
################
data("anopheles")
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
family = "poisson",
data = anopheles_sf)
anopheles_sf <- st_as_sf(anopheles, coords = c("web_x", "web_y"), crs = 3857)
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
family = "poisson",
data = anopheles_sf)
# Create grid from convex hull
shp_ch <- convex_hull_sf(an_fit$data_sf)
an_grid <- create_grid(shp_ch, spat_res = 2)
an_elev <- get_elev_raster(locations = shp_ch,
z = 9, clip = "locations")
an_elev <- get_elev_point(st_as_sf(an_grid), prj = 3857, src = "aws")$elevation
predictors <- data.frame(elevation= terra::extract(an_elev,
st_coordinates(an_grid)))
predictors <- data.frame(elevation= terra::extract(an_elev,
st_as_sf(an_grid)))
an_elev
predictors <- data.frame(elevation= an_elev)
pred_an_S <- pred_over_grid(an_fit, grid = an_grid,
predictors = predictors,
type = "joint")
pred_n_mosq_grid <-
pred_target_grid(pred_an_S,
f_target = list(n_mosq = function(lp) exp(lp)),
pd_summary = list(mean = function(Tx) mean(Tx)))
an_weights <- 1*(predictors$elevation > 400 & predictors$elevation < 830)
pred_n_mosq_shp <-
pred_target_shp(pred_an_S, shp = shp_ch,
weights = an_weights,
shp_target = sum,
f_target = list(n_mosq = function(lp) exp(lp)),
pd_summary = list(mean = function(Tx) mean(Tx),
q025 = function(Tx) quantile(Tx, 0.025),
q075 = function(Tx) quantile(Tx, 0.975)))
pred_n_mosq_shp$target$reg1$n_mosq
?anopheles
anopheles_sf <- st_as_sf(anopheles, coords = c("web_x", "web_y"), crs = 3857)
shp_ch <- convex_hull_sf(anopheles_sf)
shp_ch
library(terra)
r <- rast(file.choose())
plot(r)
plot(log(r))
data <- read.csv("teaching/MBG/Assessment/Remo_CAMEROUN.csv")
plot(data[,("long","Lat")])
plot(data[,("long","lat")])
str(data)
plot(data[,("long","lat")])
plot(data[,c("long","lat")])
dir()
dir("teaching/MBG/Assessment/")
# Define the folder path
folder_path <- "teaching/MBG/Assessment/"
# List all CSV files in the folder
csv_files <- list.files(folder_path, pattern = "*.csv", full.names = TRUE)
# Loop through each file
for (file in csv_files) {
# Read the CSV file
data <- read.csv(file)
# Check if "lat" and "long" columns exist
if (all(c("lat", "long") %in% names(data))) {
# Swap values
temp <- data$lat
data$lat <- data$long
data$long <- temp
# Save the modified file
write.csv(data, file, row.names = FALSE)
cat("Processed:", file, "\n")
} else {
cat("Skipping (missing columns):", file, "\n")
}
}
data <- read.csv("teaching/MBG/Assessment/Remo_CAMEROUN.csv")
plot(data[,c("long","lat")])
data <- read.csv("teaching/MBG/Assessment/Remo_MALAWI.csv")
plot(data[,c("long","lat")])
data <- read.csv("teaching/MBG/Assessment/Remo_MOZAMBIQUE.csv")
plot(data[,c("long","lat")])
rm(list = ls())  # Clear workspace
library(RiskMap)  # Load RiskMap package for spatial modeling
# Load Required Packages
library(ggplot2)  # For data visualization
library(sf)  # For spatial data handling
library(RiskMap)  # Spatial risk mapping functions
# Load data-sets
# These datasets contain spatial and epidemiological data
data(liberia)
data(malkenya)
data(anopheles)
# Load Required Packages
library(ggplot2)  # For data visualization
library(sf)  # For spatial data handling
library(RiskMap)  # Spatial risk mapping functions
# Load data-sets
# These datasets contain spatial and epidemiological data
data(liberia)
data(malkenya)
data(anopheles)
# Exploring associations with risk factors using count data
# Calculate prevalence as proportion of positive cases
tibble::glimpse(liberia)  # View dataset structure
liberia$prev <- liberia$npos/liberia$ntest
# Plot prevalence against elevation
ggplot(liberia, aes(x = elevation, y = prev)) + geom_point() +
labs(x="Elevation (meters)",y="Prevalence")
# Visualizing empirical logit transformation
ggplot(liberia, aes(x = elevation, y = elogit)) + geom_point() +
# Adding a smoothing spline to explore trends
labs(x="Elevation (meters)",y="Empirical logit") +
stat_smooth(method = "gam", formula = y ~ s(x),se=FALSE)+
# Adding linear regression fit with log-transformed elevation
stat_smooth(method = "lm", formula = y ~ log(x),
col="green",lty="dashed",se=FALSE) +
# Adding linear regression fit with change point in 150 meters
stat_smooth(method = "lm", formula = y ~ x + pmax(x-150, 0),
col="red",lty="dashed",se=FALSE)
rm(list = ls())  # Clear workspace
library(RiskMap)  # Load RiskMap package for spatial modeling
# Load Required Packages
library(ggplot2)  # For data visualization
library(sf)  # For spatial data handling
library(RiskMap)  # Spatial risk mapping functions
# Load data-sets
# These datasets contain spatial and epidemiological data
data(liberia)
data(malkenya)
data(anopheles)
# Calculate prevalence as proportion of positive cases
tibble::glimpse(liberia)  # View dataset structure
liberia$prev <- liberia$npos/liberia$ntest
# Plot prevalence against elevation
ggplot(liberia, aes(x = elevation, y = prev)) + geom_point() +
labs(x="Elevation (meters)",y="Prevalence")
# Compute the empirical logit transformation to stabilize variance
liberia$elogit <- log((liberia$npos+0.5)/
(liberia$ntest-liberia$npos+0.5))
# Visualizing empirical logit transformation
ggplot(liberia, aes(x = elevation, y = elogit)) + geom_point() +
# Adding a smoothing spline to explore trends
labs(x="Elevation (meters)",y="Empirical logit") +
stat_smooth(method = "gam", formula = y ~ s(x),se=FALSE)+
# Adding linear regression fit with log-transformed elevation
stat_smooth(method = "lm", formula = y ~ log(x),
col="green",lty="dashed",se=FALSE) +
# Adding linear regression fit with change point in 150 meters
stat_smooth(method = "lm", formula = y ~ x + pmax(x-150, 0),
col="red",lty="dashed",se=FALSE)
# Anopheles mosquito count transformation and visualization
anopheles$log_counts <- log(anopheles$An.gambiae)
ggplot(anopheles, aes(x = elevation, y = log_counts)) + geom_point() +
# Adding a smoothing spline to explore trends
labs(x="Elevation (meters)",y="Log number of An. gambiae mosquitoes") +
stat_smooth(method = "lm", formula = y ~ x, se=FALSE)
# Community survey data
# Extract subset for community survey
malkenya_comm <- malkenya[malkenya$Survey=="community", ]
# Age-group Analysis
# Group ages into predefined classes
tibble::glimpse(malkenya_comm)  # View dataset structure
malkenya_comm$Age_class <- cut(malkenya_comm$Age,
breaks = c(0, 5, 10, 15, 30, 40, 50, 100),
include.lowest = TRUE)
# Compute empirical logit within each age group
tibble::glimpse(malkenya_comm)
age_class_data <- aggregate(RDT ~ Age_class + Gender,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute the average age within each group
age_class_data$age_mean_point <- aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = mean)$Age
# Compute number of individuals per age group by gender
age_class_data$n_obs <-  aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = length)$Age
# Visualizing empirical logit by age groups
ggplot(age_class_data, aes(x = age_mean_point, y = RDT,
size = n_obs,
colour = Gender)) +
geom_point() +
labs(x="Age (years)",y="Empirical logit")
ggplot(anopheles, aes(x = elevation, y = log_counts)) + geom_point() +
# Adding a smoothing spline to explore trends
labs(x="Elevation (meters)",y="Log number of An. gambiae mosquitoes") +
stat_smooth(method = "lm", formula = y ~ x, se=FALSE)
# Community survey data
# Extract subset for community survey
malkenya_comm <- malkenya[malkenya$Survey=="community", ]
# Age-group Analysis
# Group ages into predefined classes
tibble::glimpse(malkenya_comm)  # View dataset structure
malkenya_comm$Age_class <- cut(malkenya_comm$Age,
breaks = c(0, 5, 10, 15, 30, 40, 50, 100),
include.lowest = TRUE)
# Compute empirical logit within each age group
tibble::glimpse(malkenya_comm)
age_class_data <- aggregate(RDT ~ Age_class + Gender,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute the average age within each group
age_class_data$age_mean_point <- aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = mean)$Age
# Compute number of individuals per age group by gender
age_class_data$n_obs <-  aggregate(Age ~ Age_class + Gender,
data = malkenya_comm,
FUN = length)$Age
# Visualizing empirical logit by age groups
ggplot(age_class_data, aes(x = age_mean_point, y = RDT,
size = n_obs,
colour = Gender)) +
geom_point() +
labs(x="Age (years)",y="Empirical logit")
# Logistic regression models to analyze age and gender interactions
glm_age_gender_interaction <- glm(RDT ~ Age + Gender:Age +
pmax(Age-15, 0) + Gender:pmax(Age-15, 0) +
pmax(Age-40, 0) + Gender:pmax(Age-40, 0),
data = malkenya_comm, family = binomial)
summary(glm_age_gender_interaction)
# Alternative model without interaction terms
glm_age_gender_no_interaction <- glm(RDT ~ Age +  pmax(Age-15, 0) + pmax(Age-40, 0),
data = malkenya_comm, family = binomial)
# Compare models using Chi-square test
anova(glm_age_gender_no_interaction, glm_age_gender_interaction, test = "Chisq")
# Elevation Analysis
# Group elevation into quantiles to analyze relationship with RDT
tibble::glimpse(malkenya_comm)
# Compute empirical logit by elevation class
elev_class_data <- aggregate(RDT ~ elevation_class,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute average elevation within each class
elev_class_data$elevation_mean <- aggregate(elevation ~ elevation_class,
data = malkenya_comm,
FUN = mean)$elevation
# Logistic regression models to analyze age and gender interactions
glm_age_gender_interaction <- glm(RDT ~ Age + Gender:Age +
pmax(Age-15, 0) + Gender:pmax(Age-15, 0) +
pmax(Age-40, 0) + Gender:pmax(Age-40, 0),
data = malkenya_comm, family = binomial)
summary(glm_age_gender_interaction)
# Alternative model without interaction terms
glm_age_gender_no_interaction <- glm(RDT ~ Age +  pmax(Age-15, 0) + pmax(Age-40, 0),
data = malkenya_comm, family = binomial)
# Compare models using Chi-square test
anova(glm_age_gender_no_interaction, glm_age_gender_interaction, test = "Chisq")
# Elevation Analysis
# Group elevation into quantiles to analyze relationship with RDT
tibble::glimpse(malkenya_comm)
malkenya_comm$elevation_class <- cut(malkenya_comm$elevation,
breaks = quantile(malkenya_comm$elevation, seq(0, 1, by = 0.1)),
include.lowest = TRUE)
# Compute empirical logit by elevation class
elev_class_data <- aggregate(RDT ~ elevation_class,
data = malkenya_comm,
FUN = function(y)
log((sum(y)+0.5)/(length(y)-sum(y)+0.5)))
# Compute average elevation within each class
elev_class_data$elevation_mean <- aggregate(elevation ~ elevation_class,
data = malkenya_comm,
FUN = mean)$elevation
# Visualizing empirical logit by elevation
ggplot(elev_class_data, aes(x = elevation_mean, y = RDT),
size = n_obs) +
geom_point() +
labs(x="Elevation (meters)",y="Empirical logit")
# Visualizing empirical logit transformation
ggplot(liberia, aes(x = elevation, y = elogit)) + geom_point() +
# Adding a smoothing spline to explore trends
labs(x="Elevation (meters)",y="Empirical logit") +
stat_smooth(method = "gam", formula = y ~ s(x),se=FALSE)+
# Adding linear regression fit with log-transformed elevation
stat_smooth(method = "lm", formula = y ~ log(x),
col="green",lty="dashed",se=FALSE) +
# Adding linear regression fit with change point in 150 meters
stat_smooth(method = "lm", formula = y ~ x + pmax(x-150, 0),
col="red",lty="dashed",se=FALSE)
# Anopheles mosquito count transformation and visualization
anopheles$log_counts <- log(anopheles$An.gambiae)
ggplot(anopheles, aes(x = elevation, y = log_counts)) + geom_point() +
# Adding a smoothing spline to explore trends
labs(x="Elevation (meters)",y="Log number of An. gambiae mosquitoes") +
stat_smooth(method = "lm", formula = y ~ x, se=FALSE)
library(lme4)
data("liberia")
# Create the ID of the location
liberia$ID_loc <- 1:nrow(liberia)
# Binomial mixed model with log-elevation
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc), family = binomial,
data = liberia, nAGQ = 25)
summary(fit_glmer_lib)
# Clear the workspace
rm(list = ls())
# Load necessary libraries
library(RiskMap)  # For RiskMap functionality
library(lme4)    # For mixed-effects models
data("liberia")   # Load the Liberia dataset
# Create a unique ID for each location in the Liberia dataset
liberia$ID_loc <- 1:nrow(liberia)
# Fit a binomial mixed-effects model with log-elevation as a fixed effect and location as a random effect
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc),
family = binomial, data = liberia, nAGQ = 25)
# Summarize the model results
summary(fit_glmer_lib)
### Propose UTM projection for Liberia
library(sf)
# Convert Liberia data to an sf object with WGS84 (EPSG:4326) CRS
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
propose_utm(liberia_sf)
# Transform the shapefile to the proposed UTM CRS
shp_lb <- st_transform(shp_lb, crs = crs_lb)
### Get the shapefile for Liberia
library(rgeoboundaries)
# Download Liberia's administrative boundary (ADM0 level)
shp_lb <- geoboundaries(country = "liberia", adm_lvl = "adm0")
# Transform the shapefile to the proposed UTM CRS
shp_lb <- st_transform(shp_lb, crs = crs_lb)
library(lme4)    # For mixed-effects models
data("liberia")   # Load the Liberia dataset
# Create a unique ID for each location in the Liberia dataset
liberia$ID_loc <- 1:nrow(liberia)
# Fit a binomial mixed-effects model with log-elevation as a fixed effect and location as a random effect
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc),
family = binomial, data = liberia, nAGQ = 25)
# Summarize the model results
summary(fit_glmer_lib)
### Propose UTM projection for Liberia
library(sf)
# Convert Liberia data to an sf object with WGS84 (EPSG:4326) CRS
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
# Propose a UTM CRS for Liberia
crs_lb <- propose_utm(liberia_sf)
### Get the shapefile for Liberia
library(rgeoboundaries)
# Download Liberia's administrative boundary (ADM0 level)
shp_lb <- geoboundaries(country = "liberia", adm_lvl = "adm0")
# Transform the shapefile to the proposed UTM CRS
shp_lb <- st_transform(shp_lb, crs = crs_lb)
# Create a grid over Liberia with a spatial resolution of 5 km
grid_utm <- create_grid(shp_lb, spat_res = 5)
# Transform the grid back to WGS84 (EPSG:4326) for compatibility with other data
grid_ll <- st_transform(grid_utm, crs = 4326)
### Get elevation raster for Liberia
library(elevatr)
# Convert the elevation raster to a data frame for use with ggplot2
library(terra)
raster_df <- as.data.frame(elev_lb, xy = TRUE)
### Get elevation raster for Liberia
library(elevatr)
# Download elevation data for Liberia at zoom level 5 and clip it to the country boundary
elev_lb <- get_elev_raster(locations = shp_lb, z = 5, clip = "locations")
# Convert the elevation raster to a data frame for use with ggplot2
library(terra)
raster_df <- as.data.frame(elev_lb, xy = TRUE)
colnames(raster_df)[3] <- "elev"  # Rename the elevation column
# Plot the elevation raster using ggplot2
library(ggplot2)
ggplot(data = raster_df) +
geom_raster(aes(x = x, y = y, fill = elev)) +  # Plot elevation as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Elevation", fill = "Density") +  # Add title and legend label
geom_sf(data = shp_lb, col = 2, lwd = 2, fill = NA)  # Overlay Liberia boundary
### Download and process temperature data
library(geodata)
# Download monthly minimum temperature data for Liberia from WorldClim
clim_lb <- worldclim_country(country = "Liberia", var = "tmin", path = tempdir())
### Predict prevalence using elevation data
# Extract elevation values at grid locations
elev_data_frame <- data.frame(elevation = extract(elev_lb, st_coordinates(grid_utm)))
# Predict prevalence using the fitted model
pred_glmer <- predict(fit_glmer_lib, newdata = elev_data_frame, type = "response", re.form = NA)
# Create a data frame with predicted prevalence and grid coordinates
raster_pred <- data.frame(x = st_coordinates(grid_utm)[, 1],
y = st_coordinates(grid_utm)[, 2],
prev = pred_glmer)
# Plot the predicted prevalence using ggplot2
ggplot(data = raster_pred) +
geom_raster(aes(x = x, y = y, fill = prev)) +  # Plot prevalence as a raster
scale_fill_viridis_c() +  # Use viridis color scale
coord_cartesian() +  # Use Cartesian coordinates
theme_minimal() +  # Use a minimal theme
labs(title = "Predictions", fill = "Prevalence")  # Add title and legend label
rm(list = ls())
library(RiskMap)
library(lme4)
library(sf)
data("liberia")
# Create the ID of the location
liberia$ID_loc <- 1:nrow(liberia)
# Binomial mixed model with log-elevation
fit_glmer_lib <- glmer(cbind(npos, ntest) ~ log(elevation) + (1|ID_loc), family = binomial,
data = liberia, nAGQ = 25)
summary(fit_glmer_lib)
liberia$Z_hat <- ranef(fit_glmer_lib)$ID_loc[,1]
liberia <- st_as_sf(liberia, coords = c("long", "lat"),
crs=4326)
crs_lb <- propose_utm(liberia)
liberia <- st_transform(liberia, crs = crs_lb)
liberia_variog <- s_variogram(data = liberia,
variable = "Z_hat",
bins = c(15, 30, 40, 80, 120,
160, 200, 250, 300, 350),
scale_to_km = TRUE,
n_permutation = 10000)
plot_s_variogram(liberia_variog)
plot_s_variogram(liberia_variog,
plot_envelope = TRUE)
library(RiskMap)
data("tz_malaria")
tz_malaria
