pred <- time.predict(matern.fit,
predictors = data.frame(t=mal$t,minT.lag2=mal$minT.lag2,
maxT.lag2=mal$maxT.lag2,
Rain.lag2=mal$Rain.lag2),
time.pred = mal$t,scale.pred = "linear")
matplot(pred$time.pred,cbind(pred$predictions,pred$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1)
points(mal$t,log(mal$Cases),pch=20,col=2)
0.05*nrow(mal)
### Point 3
# year.holdout: is the number of years that are part of the holdout data-set
year.holdout <- 1
# year.holdout: is the number of years that are part of the holdout data-set
year.holdout <- 1
time.split <- max(mal$t)-year.holdout*12
# Identify the rows in the data-set that correspond to the training data-set
train <- which(mal$t<=time.split)
# Identify the rows in the data-set that correspond to the holdout data-set
holdout <- which(mal$t>time.split)
matern.fit.train <- fit.matern(form = log(Cases)~t + I((t>50)*(t-50)) + I(t>225)+
minT.lag2 + maxT.lag2 + Rain.lag2,
data=mal[train,],time="t",kappa=2.5,
start.cov.pars=c(1,1),method="nlminb")
t.pred.holdout <- mal$t[holdout]
pred.holdout <- time.predict(fitted.model=matern.fit.train,
predictors = data.frame(t=t.pred.holdout,
minT.lag2=mal$minT.lag2[holdout],
maxT.lag2=mal$maxT.lag2[holdout],
Rain.lag2=mal$Rain.lag2[holdout]),
time.pred = t.pred.holdout,scale.pred = "linear")
matplot(pred.holdout$time.pred,cbind(pred.holdout$predictions,pred.holdout$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1,
ylab="log(Cases)",xlab="Time")
points(mal[holdout,]$t,log(mal[holdout,]$Cases),pch=20)
# Bias
mean((pred.holdout$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
mean((pred.holdout$predictions-log(mal[holdout,]$Cases))ˆ2)
# year.holdout: is the number of years that are part of the holdout data-set
year.holdout <- 1
time.split <- max(mal$t)-year.holdout*12
# Identify the rows in the data-set that correspond to the training data-set
train <- which(mal$t<=time.split)
# Identify the rows in the data-set that correspond to the holdout data-set
holdout <- which(mal$t>time.split)
matern.fit.train <- fit.matern(form = log(Cases)~t + I((t>50)*(t-50)) + I(t>225)+
minT.lag2 + maxT.lag2 + Rain.lag2,
data=mal[train,],time="t",kappa=2.5,
start.cov.pars=c(1,1),method="nlminb")
t.pred.holdout <- mal$t[holdout]
pred.holdout <- time.predict(fitted.model=matern.fit.train,
predictors = data.frame(t=t.pred.holdout,
minT.lag2=mal$minT.lag2[holdout],
maxT.lag2=mal$maxT.lag2[holdout],
Rain.lag2=mal$Rain.lag2[holdout]),
time.pred = t.pred.holdout,scale.pred = "linear")
matplot(pred.holdout$time.pred,cbind(pred.holdout$predictions,pred.holdout$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1,
ylab="log(Cases)",xlab="Time")
points(mal[holdout,]$t,log(mal[holdout,]$Cases),pch=20)
# Bias
mean((pred.holdout$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
mean((pred.holdout$predictions-log(mal[holdout,]$Cases))ˆ2)
# Bias
mean((pred.holdout$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
mean((pred.holdout$predictions-log(mal[holdout,]$Cases))^2)
# Mean-square error
sqrt(mean((pred.holdout$predictions-log(mal[holdout,]$Cases))^2))
# Point 4
matern.fit.with.sin <- fit.matern(form=
log(Cases) ~ t+I((t-50)*(t>50))+I(t>229)+sin(2*pi*t/12)+cos(2*pi*t/12)+
sin(2*pi*t/6)+cos(2*pi*t/6),time="t",start.cov.pars = c(1,5),
kappa=2.5,data=mal[train,], # NOTE: selecting the training data
method="nlminb")
pred.holdout.with.sin <- time.predict(fitted.model=matern.fit.with.sin,
predictors = data.frame(t=t.pred.holdout),
time.pred = t.pred.holdout,
scale.pred = "linear")
matplot(pred.holdout.with.sin$time.pred,
cbind(pred.holdout.with.sin$predictions,pred.holdout.with.sin$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1,ylab="log(Cases)",xlab="Time")
matplot(pred.holdout.with.sin$time.pred,
cbind(pred.holdout.with.sin$predictions,pred.holdout.with.sin$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1,ylab="log(Cases)",xlab="Time")
points(mal[holdout,]$t,log(mal[holdout,]$Cases),pch=20)
# Bias
mean((pred.holdout.with.sin$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
mean((pred.holdout.with.sin$predictions-log(mal[holdout,]$Cases))^2)
# Bias
mean((pred.holdout.with.sin$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
sqrt(mean((pred.holdout.with.sin$predictions-log(mal[holdout,]$Cases))^2))
matern.fit.train <- fit.matern(form = log(Cases)~t + I((t>50)*(t-50)) + I(t>225)+
minT.lag2 + maxT.lag2 + Rain.lag2,
data=mal[train,],time="t",kappa=2.5,
start.cov.pars=c(1,1),method="nlminb")
t.pred.holdout <- mal$t[holdout]
pred.holdout <- time.predict(fitted.model=matern.fit.train,
predictors = data.frame(t=t.pred.holdout,
minT.lag2=mal$minT.lag2[holdout],
maxT.lag2=mal$maxT.lag2[holdout],
Rain.lag2=mal$Rain.lag2[holdout]),
time.pred = t.pred.holdout,scale.pred = "linear")
matplot(pred.holdout$time.pred,cbind(pred.holdout$predictions,pred.holdout$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1,
ylab="log(Cases)",xlab="Time")
points(mal[holdout,]$t,log(mal[holdout,]$Cases),pch=20)
# Bias
model_A <- list()
model_A$bias <- mean((pred.holdout$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
model_A$rmse <- sqrt(mean((pred.holdout$predictions-log(mal[holdout,]$Cases))^2))
# Point 4
matern.fit.with.sin <- fit.matern(form=
log(Cases) ~ t+I((t-50)*(t>50))+I(t>229)+sin(2*pi*t/12)+cos(2*pi*t/12)+
sin(2*pi*t/6)+cos(2*pi*t/6),time="t",start.cov.pars = c(1,5),
kappa=2.5,data=mal[train,], # NOTE: selecting the training data
method="nlminb")
pred.holdout.with.sin <- time.predict(fitted.model=matern.fit.with.sin,
predictors = data.frame(t=t.pred.holdout),
time.pred = t.pred.holdout,
scale.pred = "linear")
matplot(pred.holdout.with.sin$time.pred,
cbind(pred.holdout.with.sin$predictions,pred.holdout.with.sin$quantiles),
lty=c("solid","dashed","dashed"),type="l",col=1,ylab="log(Cases)",xlab="Time")
points(mal[holdout,]$t,log(mal[holdout,]$Cases),pch=20)
# Bias
model_B <- list()
model_B$bias <- mean((pred.holdout$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
model_B$rmse <- sqrt(mean((pred.holdout$predictions-log(mal[holdout,]$Cases))^2))
model_A
model_B
# Bias
model_B <- list()
model_B$bias <- mean((pred.holdout.with.sin$predictions-log(mal[holdout,]$Cases)))
# Mean-square error
model_B$rmse <- sqrt(mean((pred.holdout.with.sin$predictions-log(mal[holdout,]$Cases))^2))
model_A
model_B
summary(fit.matern())
get.CI(matern.fit)
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("liberia")
str(liberia)
rm(list = ls())
library(RiskMap)
library(sf)
library(ggplot2)
data("liberia")
# Convert to an sf object
liberia_sf <- st_as_sf(liberia, coords = c("long", "lat"), crs = 4326)
crs_lb <- propose_utm(liberia_sf)
crs_lb
liberia_sf <- st_transform(liberia_sf)
str(liberia)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
data = liberia_sf,
family = "binomial",
data = liberia_sf)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
family = "binomial",
data = liberia_sf)
check_mcmc(lb_fit)
check_mcmc(lb_fit, component = 1)
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1, 1:nrow(liberia_sf)))
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(lb_fit)
check_mcmc(lb_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
# Updating the MCMCL
theta0 <- coef(lb_fit)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
par0 = thtea0,
family = "binomial",
data = liberia_sf)
# Updating the MCMCL
theta0 <- coef(lb_fit)
lb_fit <- glgpm(npos ~ log(elevation) + gp(),
den = ntest,
par0 = theta0,
family = "binomial",
data = liberia_sf)
summary(lb_fit)
lb_fit <- glgpm(npos ~ log(elevation) + gp(nugget = NULL),
den = ntest,
family = "binomial",
data = liberia_sf)
lb_fit <- glgpm(npos ~ log(elevation) + gp(nugget = NULL),
den = ntest,
par0 = theta0,
family = "binomial",
data = liberia_sf)
# Updating the MCMCL
theta0 <- coef(lb_fit)
lb_fit <- glgpm(npos ~ log(elevation) + gp(nugget = NULL),
den = ntest,
par0 = theta0,
family = "binomial",
data = liberia_sf)
summary(lb_fit)
# Updating the MCMCL
theta0 <- coef(lb_fit)
lb_fit <- glgpm(npos ~ log(elevation) + gp(nugget = NULL),
den = ntest,
par0 = theta0,
family = "binomial",
data = liberia_sf)
summary(lb_fit)
data("anopheles")
?anopheles
anopheles_sf <- st_as_sf(liberia, coords = c("web_x", "web_y"), crs = 3857)
propose_utm(anopheles_sf)
anopheles_sf <- st_as_sf(liberia, coords = c("web_x", "web_y"), crs = 3857)
anopheles_sf <- st_as_sf(anopheles, coords = c("web_x", "web_y"), crs = 3857)
crs_lb <- propose_utm(anopheles_sf)
crs_lb
str(anopheles)
lb_fit <- glgpm(An.gambiae ~ elevation + gp(),
family = "poisson",
data = anopheles_sf)
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
family = "poisson",
data = anopheles_sf)
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
family = "poisson",
data = anopheles_sf)
check_mcmc(an_fit)
check_mcmc(an_fit)
check_mcmc(an_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(an_fit, check_mean = FALSE, component = sample(1:nrow(liberia_sf), 1))
check_mcmc(an_fit, check_mean = FALSE, component = sample(1:nrow(anopheles_sf), 1))
check_mcmc(an_fit, check_mean = FALSE, component = sample(1:nrow(anopheles_sf), 1))
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
par0 = theta0,
family = "poisson",
data = anopheles_sf)
# Updating the MCMCL
theta0 <- coef(an_fit)
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
par0 = theta0,
family = "poisson",
data = anopheles_sf)
# Updating the MCMCL
theta0 <- coef(an_fit)
an_fit <- glgpm(An.gambiae ~ elevation + gp(),
par0 = theta0,
family = "poisson",
data = anopheles_sf)
summary(an_fit)
rm(list = ls())
library(RiskMap)
data("tz_malaria")
rm(list = ls())
library(RiskMap)
data("tz_malaria")
ranef(glmer_fit)$cluster.number
library(lme4)
ranef(glmer_fit)$cluster.number
glmer_fit <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - opt_cp, 0) +
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
ranef(glmer_fit)$cluster.number
glmer_fit <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - 33, 0) +
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
ranef(glmer_fit)$cluster.number
ranef(glmer_fit)$cluster.number[,1]
tz_malaria$Z_hat <- ranef(glmer_fit)$cluster.number[,1]
s_variogram(data = tz_malaria, variable = Z_hat)
str9tz_malaria
str(tz_malaria)
?tz_malaria
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
propose_utm(tz_malaria)
s_variogram(data = tz_malaria, variable = Z_hat)
s_variogram(data = tz_malaria, variable = "Z_hat")
dist_summaries(tz_malaria)
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,25, length = 15),
scale_to_km = TRUE)
tz_vari <-
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,25, length = 15),
scale_to_km = TRUE)
tz_vari <-
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,25, length = 15),
scale_to_km = TRUE,
n_permutation = 10000)
plot_s_variogram(tz_vari, plot_envelope = TRUE)
tz_vari <-
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,15, length = 15),
scale_to_km = TRUE,
n_permutation = 10000)
plot_s_variogram(tz_vari, plot_envelope = TRUE)
tz_vari <-
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,20, length = 10),
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari, plot_envelope = TRUE)
glmer_fit <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat <- ranef(glmer_fit)$cluster.number[,1]
glmer_fit_null <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat_null <- ranef(glmer_fit_null)$cluster.number[,1]
tz_malaria <- st_as_sf(tz_malaria, coords = c("utm_x", "utm_y"), crs = 32736)
glmer_fit_null <- glmer(cbind(Pf, Ex - Pf) ~ (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat_null <- ranef(glmer_fit_null)$cluster.number[,1]
tz_vari_null <-
s_variogram(data = tz_malaria, variable = "Z_hat_null",
bins = seq(1,20, length = 10),
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
tz_vari_null <-
s_variogram(data = tz_malaria, variable = "Z_hat_null",
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
tz_vari_null <-
s_variogram(data = tz_malaria, variable = "Z_hat_null",
bins = seq(1,500, length = 15),
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari_null, plot_envelope = TRUE)
glmer_fit <- glmer(cbind(Pf, Ex - Pf) ~ Temperature + pmax(Temperature - 33, 0) +
EVI + (1 | cluster.number),
data = tz_malaria, nAGQ = 100,
family = binomial)
tz_malaria$Z_hat <- ranef(glmer_fit)$cluster.number[,1]
tz_vari <-
s_variogram(data = tz_malaria, variable = "Z_hat",
bins = seq(1,500, length = 15),
scale_to_km = TRUE,
n_permutation = 1000)
plot_s_variogram(tz_vari, plot_envelope = TRUE)
glgm_fit_null <- glgm(Pf ~ gp(nugget = NULL),
data = tz_malaria,
family = "binomial")
glgm_fit_null <- glgpm(Pf ~ gp(nugget = NULL),
data = tz_malaria,
family = "binomial")
glgm_fit_null <- glgpm(Pf ~ gp(nugget = NULL),
den = Ex,
data = tz_malaria,
family = "binomial")
summary(glgm_fit_null)
# Fitting a model with covariates
glgm_fit <- glgpm(Pf ~ Temperature + pmax(Temperature - 33, 0) +
EVI + gp(nugget = NULL),
den = Ex,
data = tz_malaria,
family = "binomial")
coef(glgm_fit_null)
theta_hat_null <- coef(glgm_fit_null)
curve(theta_hat_null$tau2 + theta_hat_null$sigma2*(1-exp(-x/theta_hat_null$phi)),
xlim = c(0,500))
curve(theta_hat_null$tau2 + theta_hat_null$sigma2*(1-exp(-x/theta_hat_null$phi)),
xlim = c(0,1000))
curve(theta_hat$tau2 + theta_hat$sigma2*(1-exp(-x/theta_hatl$phi)),
xlim = c(0,1000), ylab = "Variogram", xlab = "Distance")
theta_hat<- coef(glgm_fit)
curve(theta_hat$tau2 + theta_hat$sigma2*(1-exp(-x/theta_hatl$phi)),
xlim = c(0,1000), ylab = "Variogram", xlab = "Distance")
curve(theta_hat$tau2 + theta_hat$sigma2*(1-exp(-x/theta_hat$phi)),
xlim = c(0,1000), ylab = "Variogram", xlab = "Distance")
theta_hat
theta_hat_null
library(ggplot2)
library(dplyr)
# Extract parameters
theta_hat_null <- coef(glgm_fit_null)
theta_hat <- coef(glgm_fit)
# Define a sequence of distances
distances <- seq(0, 1000, length.out = 200)
# Compute variogram values for both models
variogram_df <- data.frame(
Distance = rep(distances, 2),
Variogram = c(
theta_hat_null$tau2 + theta_hat_null$sigma2 * (1 - exp(-distances / theta_hat_null$phi)),
theta_hat$tau2 + theta_hat$sigma2 * (1 - exp(-distances / theta_hat$phi))
),
Model = factor(rep(c("Null Model", "Fitted Model"), each = length(distances)))
)
# Plot using ggplot2
ggplot(variogram_df, aes(x = Distance, y = Variogram, color = Model)) +
geom_line(size = 1.2) +
labs(
title = "Theoretical Variogram Comparison",
x = "Distance",
y = "Variogram"
) +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(
legend.title = element_blank(), # Removes legend title
legend.position = "bottom" # Places legend at the bottom for clarity
)
# Compute variogram values for both models
variogram_df <- data.frame(
Distance = rep(distances, 2),
Variogram = c(
theta_hat_null$tau2 + theta_hat_null$sigma2 * (1 - exp(-distances / theta_hat_null$phi)),
theta_hat$tau2 + theta_hat$sigma2 * (1 - exp(-distances / theta_hat$phi))
),
Model = factor(rep(c("No covariates", "With covariates"), each = length(distances)))
)
# Plot using ggplot2
ggplot(variogram_df, aes(x = Distance, y = Variogram, color = Model)) +
geom_line(size = 1.2) +
labs(
title = "Theoretical Variogram Comparison",
x = "Distance",
y = "Variogram"
) +
theme_minimal() +
scale_color_manual(values = c("blue", "red")) +
theme(
legend.title = element_blank(), # Removes legend title
legend.position = "bottom" # Places legend at the bottom for clarity
)
# Load required libraries
library(forecast)
install.packages("forecast")
# Load required libraries
library(forecast)
library(lmtest)
# Simulated example data
set.seed(123)
n <- 200  # Number of time points
time <- 1:n
X1 <- rnorm(n)  # Example covariate 1
X2 <- rnorm(n)  # Example covariate 2
Y <- 5 + 0.8 * X1 - 0.3 * X2 + arima.sim(model = list(ar = c(0.5, rep(0, 10), 0.3)), n = n)
# Step 1: Fit a Linear Model (Regression with Covariates)
lm_fit <- lm(Y ~ X1 + X2)
# Step 2: Extract Residuals and Fit AR(1) + AR(12) Model
residuals_lm <- residuals(lm_fit)
ar_model <- Arima(residuals_lm, order = c(1, 0, 0), seasonal = list(order = c(1, 0, 0), period = 12))
# Step 3: Forecast Residuals
h <- 12  # Forecast horizon
residual_forecast <- forecast(ar_model, h = h)$mean
# Step 4: Forecast the Covariate Contribution
# (Assuming new covariate values X1_new and X2_new are available)
X1_new <- rnorm(h)
X2_new <- rnorm(h)
lm_forecast <- predict(lm_fit, newdata = data.frame(X1 = X1_new, X2 = X2_new))
# Step 5: Combine Forecasts
final_forecast <- lm_forecast + residual_forecast
# Print results
print(final_forecast)
# Load required libraries
library(forecast)
library(ggplot2)
# Simulated example data
set.seed(123)
n <- 200  # Number of time points
time <- 1:n
X1 <- rnorm(n)  # Example covariate 1
X2 <- rnorm(n)  # Example covariate 2
Y <- 5 + 0.8 * X1 - 0.3 * X2 + arima.sim(model = list(ar = c(0.5, rep(0, 10), 0.3)), n = n)
# Step 1: Fit a Linear Model (Regression with Covariates)
lm_fit <- lm(Y ~ X1 + X2)
# Step 2: Extract Residuals and Fit AR(1) + AR(12) Model
residuals_lm <- residuals(lm_fit)
ar_model <- Arima(residuals_lm, order = c(1, 0, 0), seasonal = list(order = c(1, 0, 0), period = 12))
# Step 3: Forecast Residuals
h <- 24  # Forecast horizon
residual_forecast <- forecast(ar_model, h = h)$mean
# Step 4: Forecast the Covariate Contribution
# (Assuming new covariate values X1_new and X2_new are available)
X1_new <- rnorm(h)
X2_new <- rnorm(h)
lm_forecast <- predict(lm_fit, newdata = data.frame(X1 = X1_new, X2 = X2_new))
# Step 5: Combine Forecasts
final_forecast <- lm_forecast + residual_forecast
# Create a time index for plotting
forecast_time <- (n + 1):(n + h)
# Step 6: Plot Observed and Forecasted Values
df_plot <- data.frame(
Time = c(time, forecast_time),
Value = c(Y, final_forecast),
Type = c(rep("Observed", n), rep("Forecast", h))
)
ggplot(df_plot, aes(x = Time, y = Value, color = Type)) +
geom_line(size = 1) +
labs(title = "Observed vs. Forecasted Values",
x = "Time", y = "Value") +
scale_color_manual(values = c("Observed" = "black", "Forecast" = "red")) +
theme_minimal()
